/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fit.query.common;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2020-09-04")
public class FastQueryWithFilter {

  public interface Iface {

    public int heartbeat() throws org.apache.thrift.TException;

    public int count(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.lang.String timeKey, long s, long e, java.lang.String rule) throws org.apache.thrift.TException;

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> queryForList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, int f, int size) throws org.apache.thrift.TException;

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> exportList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String firstField) throws org.apache.thrift.TException;

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> exportListWithBuss(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String excludeRule, java.lang.String firstField, java.util.List<java.lang.String> bussFields) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void heartbeat(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void count(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.lang.String timeKey, long s, long e, java.lang.String rule, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void queryForList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, int f, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException;

    public void exportList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String firstField, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException;

    public void exportListWithBuss(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String excludeRule, java.lang.String firstField, java.util.List<java.lang.String> bussFields, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int heartbeat() throws org.apache.thrift.TException
    {
      send_heartbeat();
      return recv_heartbeat();
    }

    public void send_heartbeat() throws org.apache.thrift.TException
    {
      heartbeat_args args = new heartbeat_args();
      sendBase("heartbeat", args);
    }

    public int recv_heartbeat() throws org.apache.thrift.TException
    {
      heartbeat_result result = new heartbeat_result();
      receiveBase(result, "heartbeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "heartbeat failed: unknown result");
    }

    public int count(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.lang.String timeKey, long s, long e, java.lang.String rule) throws org.apache.thrift.TException
    {
      send_count(indices, types, routings, timeKey, s, e, rule);
      return recv_count();
    }

    public void send_count(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.lang.String timeKey, long s, long e, java.lang.String rule) throws org.apache.thrift.TException
    {
      count_args args = new count_args();
      args.setIndices(indices);
      args.setTypes(types);
      args.setRoutings(routings);
      args.setTimeKey(timeKey);
      args.setS(s);
      args.setE(e);
      args.setRule(rule);
      sendBase("count", args);
    }

    public int recv_count() throws org.apache.thrift.TException
    {
      count_result result = new count_result();
      receiveBase(result, "count");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "count failed: unknown result");
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> queryForList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, int f, int size) throws org.apache.thrift.TException
    {
      send_queryForList(indices, types, routings, fields, timeKey, s, e, rule, f, size);
      return recv_queryForList();
    }

    public void send_queryForList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, int f, int size) throws org.apache.thrift.TException
    {
      queryForList_args args = new queryForList_args();
      args.setIndices(indices);
      args.setTypes(types);
      args.setRoutings(routings);
      args.setFields(fields);
      args.setTimeKey(timeKey);
      args.setS(s);
      args.setE(e);
      args.setRule(rule);
      args.setF(f);
      args.setSize(size);
      sendBase("queryForList", args);
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> recv_queryForList() throws org.apache.thrift.TException
    {
      queryForList_result result = new queryForList_result();
      receiveBase(result, "queryForList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryForList failed: unknown result");
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> exportList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String firstField) throws org.apache.thrift.TException
    {
      send_exportList(indices, types, routings, fields, timeKey, s, e, rule, firstField);
      return recv_exportList();
    }

    public void send_exportList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String firstField) throws org.apache.thrift.TException
    {
      exportList_args args = new exportList_args();
      args.setIndices(indices);
      args.setTypes(types);
      args.setRoutings(routings);
      args.setFields(fields);
      args.setTimeKey(timeKey);
      args.setS(s);
      args.setE(e);
      args.setRule(rule);
      args.setFirstField(firstField);
      sendBase("exportList", args);
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> recv_exportList() throws org.apache.thrift.TException
    {
      exportList_result result = new exportList_result();
      receiveBase(result, "exportList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportList failed: unknown result");
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> exportListWithBuss(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String excludeRule, java.lang.String firstField, java.util.List<java.lang.String> bussFields) throws org.apache.thrift.TException
    {
      send_exportListWithBuss(indices, types, routings, fields, timeKey, s, e, rule, excludeRule, firstField, bussFields);
      return recv_exportListWithBuss();
    }

    public void send_exportListWithBuss(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String excludeRule, java.lang.String firstField, java.util.List<java.lang.String> bussFields) throws org.apache.thrift.TException
    {
      exportListWithBuss_args args = new exportListWithBuss_args();
      args.setIndices(indices);
      args.setTypes(types);
      args.setRoutings(routings);
      args.setFields(fields);
      args.setTimeKey(timeKey);
      args.setS(s);
      args.setE(e);
      args.setRule(rule);
      args.setExcludeRule(excludeRule);
      args.setFirstField(firstField);
      args.setBussFields(bussFields);
      sendBase("exportListWithBuss", args);
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> recv_exportListWithBuss() throws org.apache.thrift.TException
    {
      exportListWithBuss_result result = new exportListWithBuss_result();
      receiveBase(result, "exportListWithBuss");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportListWithBuss failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void heartbeat(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      heartbeat_call method_call = new heartbeat_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class heartbeat_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      public heartbeat_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("heartbeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        heartbeat_args args = new heartbeat_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_heartbeat();
      }
    }

    public void count(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.lang.String timeKey, long s, long e, java.lang.String rule, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      count_call method_call = new count_call(indices, types, routings, timeKey, s, e, rule, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class count_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.util.List<java.lang.String> indices;
      private java.util.List<java.lang.String> types;
      private java.util.List<java.lang.String> routings;
      private java.lang.String timeKey;
      private long s;
      private long e;
      private java.lang.String rule;
      public count_call(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.lang.String timeKey, long s, long e, java.lang.String rule, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.indices = indices;
        this.types = types;
        this.routings = routings;
        this.timeKey = timeKey;
        this.s = s;
        this.e = e;
        this.rule = rule;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("count", org.apache.thrift.protocol.TMessageType.CALL, 0));
        count_args args = new count_args();
        args.setIndices(indices);
        args.setTypes(types);
        args.setRoutings(routings);
        args.setTimeKey(timeKey);
        args.setS(s);
        args.setE(e);
        args.setRule(rule);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_count();
      }
    }

    public void queryForList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, int f, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryForList_call method_call = new queryForList_call(indices, types, routings, fields, timeKey, s, e, rule, f, size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryForList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> {
      private java.util.List<java.lang.String> indices;
      private java.util.List<java.lang.String> types;
      private java.util.List<java.lang.String> routings;
      private java.util.List<java.lang.String> fields;
      private java.lang.String timeKey;
      private long s;
      private long e;
      private java.lang.String rule;
      private int f;
      private int size;
      public queryForList_call(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, int f, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.indices = indices;
        this.types = types;
        this.routings = routings;
        this.fields = fields;
        this.timeKey = timeKey;
        this.s = s;
        this.e = e;
        this.rule = rule;
        this.f = f;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryForList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryForList_args args = new queryForList_args();
        args.setIndices(indices);
        args.setTypes(types);
        args.setRoutings(routings);
        args.setFields(fields);
        args.setTimeKey(timeKey);
        args.setS(s);
        args.setE(e);
        args.setRule(rule);
        args.setF(f);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryForList();
      }
    }

    public void exportList(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String firstField, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportList_call method_call = new exportList_call(indices, types, routings, fields, timeKey, s, e, rule, firstField, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportList_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> {
      private java.util.List<java.lang.String> indices;
      private java.util.List<java.lang.String> types;
      private java.util.List<java.lang.String> routings;
      private java.util.List<java.lang.String> fields;
      private java.lang.String timeKey;
      private long s;
      private long e;
      private java.lang.String rule;
      private java.lang.String firstField;
      public exportList_call(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String firstField, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.indices = indices;
        this.types = types;
        this.routings = routings;
        this.fields = fields;
        this.timeKey = timeKey;
        this.s = s;
        this.e = e;
        this.rule = rule;
        this.firstField = firstField;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportList_args args = new exportList_args();
        args.setIndices(indices);
        args.setTypes(types);
        args.setRoutings(routings);
        args.setFields(fields);
        args.setTimeKey(timeKey);
        args.setS(s);
        args.setE(e);
        args.setRule(rule);
        args.setFirstField(firstField);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportList();
      }
    }

    public void exportListWithBuss(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String excludeRule, java.lang.String firstField, java.util.List<java.lang.String> bussFields, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportListWithBuss_call method_call = new exportListWithBuss_call(indices, types, routings, fields, timeKey, s, e, rule, excludeRule, firstField, bussFields, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportListWithBuss_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> {
      private java.util.List<java.lang.String> indices;
      private java.util.List<java.lang.String> types;
      private java.util.List<java.lang.String> routings;
      private java.util.List<java.lang.String> fields;
      private java.lang.String timeKey;
      private long s;
      private long e;
      private java.lang.String rule;
      private java.lang.String excludeRule;
      private java.lang.String firstField;
      private java.util.List<java.lang.String> bussFields;
      public exportListWithBuss_call(java.util.List<java.lang.String> indices, java.util.List<java.lang.String> types, java.util.List<java.lang.String> routings, java.util.List<java.lang.String> fields, java.lang.String timeKey, long s, long e, java.lang.String rule, java.lang.String excludeRule, java.lang.String firstField, java.util.List<java.lang.String> bussFields, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.indices = indices;
        this.types = types;
        this.routings = routings;
        this.fields = fields;
        this.timeKey = timeKey;
        this.s = s;
        this.e = e;
        this.rule = rule;
        this.excludeRule = excludeRule;
        this.firstField = firstField;
        this.bussFields = bussFields;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportListWithBuss", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportListWithBuss_args args = new exportListWithBuss_args();
        args.setIndices(indices);
        args.setTypes(types);
        args.setRoutings(routings);
        args.setFields(fields);
        args.setTimeKey(timeKey);
        args.setS(s);
        args.setE(e);
        args.setRule(rule);
        args.setExcludeRule(excludeRule);
        args.setFirstField(firstField);
        args.setBussFields(bussFields);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportListWithBuss();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("heartbeat", new heartbeat());
      processMap.put("count", new count());
      processMap.put("queryForList", new queryForList());
      processMap.put("exportList", new exportList());
      processMap.put("exportListWithBuss", new exportListWithBuss());
      return processMap;
    }

    public static class heartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, heartbeat_args> {
      public heartbeat() {
        super("heartbeat");
      }

      public heartbeat_args getEmptyArgsInstance() {
        return new heartbeat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public heartbeat_result getResult(I iface, heartbeat_args args) throws org.apache.thrift.TException {
        heartbeat_result result = new heartbeat_result();
        result.success = iface.heartbeat();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class count<I extends Iface> extends org.apache.thrift.ProcessFunction<I, count_args> {
      public count() {
        super("count");
      }

      public count_args getEmptyArgsInstance() {
        return new count_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public count_result getResult(I iface, count_args args) throws org.apache.thrift.TException {
        count_result result = new count_result();
        result.success = iface.count(args.indices, args.types, args.routings, args.timeKey, args.s, args.e, args.rule);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryForList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryForList_args> {
      public queryForList() {
        super("queryForList");
      }

      public queryForList_args getEmptyArgsInstance() {
        return new queryForList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryForList_result getResult(I iface, queryForList_args args) throws org.apache.thrift.TException {
        queryForList_result result = new queryForList_result();
        result.success = iface.queryForList(args.indices, args.types, args.routings, args.fields, args.timeKey, args.s, args.e, args.rule, args.f, args.size);
        return result;
      }
    }

    public static class exportList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportList_args> {
      public exportList() {
        super("exportList");
      }

      public exportList_args getEmptyArgsInstance() {
        return new exportList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportList_result getResult(I iface, exportList_args args) throws org.apache.thrift.TException {
        exportList_result result = new exportList_result();
        result.success = iface.exportList(args.indices, args.types, args.routings, args.fields, args.timeKey, args.s, args.e, args.rule, args.firstField);
        return result;
      }
    }

    public static class exportListWithBuss<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportListWithBuss_args> {
      public exportListWithBuss() {
        super("exportListWithBuss");
      }

      public exportListWithBuss_args getEmptyArgsInstance() {
        return new exportListWithBuss_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public exportListWithBuss_result getResult(I iface, exportListWithBuss_args args) throws org.apache.thrift.TException {
        exportListWithBuss_result result = new exportListWithBuss_result();
        result.success = iface.exportListWithBuss(args.indices, args.types, args.routings, args.fields, args.timeKey, args.s, args.e, args.rule, args.excludeRule, args.firstField, args.bussFields);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("heartbeat", new heartbeat());
      processMap.put("count", new count());
      processMap.put("queryForList", new queryForList());
      processMap.put("exportList", new exportList());
      processMap.put("exportListWithBuss", new exportListWithBuss());
      return processMap;
    }

    public static class heartbeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, heartbeat_args, java.lang.Integer> {
      public heartbeat() {
        super("heartbeat");
      }

      public heartbeat_args getEmptyArgsInstance() {
        return new heartbeat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            heartbeat_result result = new heartbeat_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            heartbeat_result result = new heartbeat_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, heartbeat_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.heartbeat(resultHandler);
      }
    }

    public static class count<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, count_args, java.lang.Integer> {
      public count() {
        super("count");
      }

      public count_args getEmptyArgsInstance() {
        return new count_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            count_result result = new count_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            count_result result = new count_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, count_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.count(args.indices, args.types, args.routings, args.timeKey, args.s, args.e, args.rule,resultHandler);
      }
    }

    public static class queryForList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryForList_args, java.util.List<java.util.Map<java.lang.String,java.lang.String>>> {
      public queryForList() {
        super("queryForList");
      }

      public queryForList_args getEmptyArgsInstance() {
        return new queryForList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>>() { 
          public void onComplete(java.util.List<java.util.Map<java.lang.String,java.lang.String>> o) {
            queryForList_result result = new queryForList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryForList_result result = new queryForList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryForList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException {
        iface.queryForList(args.indices, args.types, args.routings, args.fields, args.timeKey, args.s, args.e, args.rule, args.f, args.size,resultHandler);
      }
    }

    public static class exportList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportList_args, java.util.List<java.util.Map<java.lang.String,java.lang.String>>> {
      public exportList() {
        super("exportList");
      }

      public exportList_args getEmptyArgsInstance() {
        return new exportList_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>>() { 
          public void onComplete(java.util.List<java.util.Map<java.lang.String,java.lang.String>> o) {
            exportList_result result = new exportList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            exportList_result result = new exportList_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportList_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException {
        iface.exportList(args.indices, args.types, args.routings, args.fields, args.timeKey, args.s, args.e, args.rule, args.firstField,resultHandler);
      }
    }

    public static class exportListWithBuss<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exportListWithBuss_args, java.util.List<java.util.Map<java.lang.String,java.lang.String>>> {
      public exportListWithBuss() {
        super("exportListWithBuss");
      }

      public exportListWithBuss_args getEmptyArgsInstance() {
        return new exportListWithBuss_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>>() { 
          public void onComplete(java.util.List<java.util.Map<java.lang.String,java.lang.String>> o) {
            exportListWithBuss_result result = new exportListWithBuss_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            exportListWithBuss_result result = new exportListWithBuss_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exportListWithBuss_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException {
        iface.exportListWithBuss(args.indices, args.types, args.routings, args.fields, args.timeKey, args.s, args.e, args.rule, args.excludeRule, args.firstField, args.bussFields,resultHandler);
      }
    }

  }

  public static class heartbeat_args implements org.apache.thrift.TBase<heartbeat_args, heartbeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<heartbeat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartbeat_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new heartbeat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new heartbeat_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartbeat_args.class, metaDataMap);
    }

    public heartbeat_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public heartbeat_args(heartbeat_args other) {
    }

    public heartbeat_args deepCopy() {
      return new heartbeat_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof heartbeat_args)
        return this.equals((heartbeat_args)that);
      return false;
    }

    public boolean equals(heartbeat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(heartbeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("heartbeat_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class heartbeat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public heartbeat_argsStandardScheme getScheme() {
        return new heartbeat_argsStandardScheme();
      }
    }

    private static class heartbeat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<heartbeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, heartbeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class heartbeat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public heartbeat_argsTupleScheme getScheme() {
        return new heartbeat_argsTupleScheme();
      }
    }

    private static class heartbeat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<heartbeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, heartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, heartbeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class heartbeat_result implements org.apache.thrift.TBase<heartbeat_result, heartbeat_result._Fields>, java.io.Serializable, Cloneable, Comparable<heartbeat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartbeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new heartbeat_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new heartbeat_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartbeat_result.class, metaDataMap);
    }

    public heartbeat_result() {
    }

    public heartbeat_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public heartbeat_result(heartbeat_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public heartbeat_result deepCopy() {
      return new heartbeat_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public heartbeat_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof heartbeat_result)
        return this.equals((heartbeat_result)that);
      return false;
    }

    public boolean equals(heartbeat_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(heartbeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("heartbeat_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class heartbeat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public heartbeat_resultStandardScheme getScheme() {
        return new heartbeat_resultStandardScheme();
      }
    }

    private static class heartbeat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<heartbeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, heartbeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class heartbeat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public heartbeat_resultTupleScheme getScheme() {
        return new heartbeat_resultTupleScheme();
      }
    }

    private static class heartbeat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<heartbeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, heartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, heartbeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class count_args implements org.apache.thrift.TBase<count_args, count_args._Fields>, java.io.Serializable, Cloneable, Comparable<count_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("count_args");

    private static final org.apache.thrift.protocol.TField INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("indices", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ROUTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("routings", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField TIME_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("timeKey", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I64, (short)5);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new count_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new count_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> indices; // required
    public java.util.List<java.lang.String> types; // required
    public java.util.List<java.lang.String> routings; // required
    public java.lang.String timeKey; // required
    public long s; // required
    public long e; // required
    public java.lang.String rule; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDICES((short)1, "indices"),
      TYPES((short)2, "types"),
      ROUTINGS((short)3, "routings"),
      TIME_KEY((short)4, "timeKey"),
      S((short)5, "s"),
      E((short)6, "e"),
      RULE((short)7, "rule");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDICES
            return INDICES;
          case 2: // TYPES
            return TYPES;
          case 3: // ROUTINGS
            return ROUTINGS;
          case 4: // TIME_KEY
            return TIME_KEY;
          case 5: // S
            return S;
          case 6: // E
            return E;
          case 7: // RULE
            return RULE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __S_ISSET_ID = 0;
    private static final int __E_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDICES, new org.apache.thrift.meta_data.FieldMetaData("indices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ROUTINGS, new org.apache.thrift.meta_data.FieldMetaData("routings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME_KEY, new org.apache.thrift.meta_data.FieldMetaData("timeKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(count_args.class, metaDataMap);
    }

    public count_args() {
    }

    public count_args(
      java.util.List<java.lang.String> indices,
      java.util.List<java.lang.String> types,
      java.util.List<java.lang.String> routings,
      java.lang.String timeKey,
      long s,
      long e,
      java.lang.String rule)
    {
      this();
      this.indices = indices;
      this.types = types;
      this.routings = routings;
      this.timeKey = timeKey;
      this.s = s;
      setSIsSet(true);
      this.e = e;
      setEIsSet(true);
      this.rule = rule;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public count_args(count_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIndices()) {
        java.util.List<java.lang.String> __this__indices = new java.util.ArrayList<java.lang.String>(other.indices);
        this.indices = __this__indices;
      }
      if (other.isSetTypes()) {
        java.util.List<java.lang.String> __this__types = new java.util.ArrayList<java.lang.String>(other.types);
        this.types = __this__types;
      }
      if (other.isSetRoutings()) {
        java.util.List<java.lang.String> __this__routings = new java.util.ArrayList<java.lang.String>(other.routings);
        this.routings = __this__routings;
      }
      if (other.isSetTimeKey()) {
        this.timeKey = other.timeKey;
      }
      this.s = other.s;
      this.e = other.e;
      if (other.isSetRule()) {
        this.rule = other.rule;
      }
    }

    public count_args deepCopy() {
      return new count_args(this);
    }

    @Override
    public void clear() {
      this.indices = null;
      this.types = null;
      this.routings = null;
      this.timeKey = null;
      setSIsSet(false);
      this.s = 0;
      setEIsSet(false);
      this.e = 0;
      this.rule = null;
    }

    public int getIndicesSize() {
      return (this.indices == null) ? 0 : this.indices.size();
    }

    public java.util.Iterator<java.lang.String> getIndicesIterator() {
      return (this.indices == null) ? null : this.indices.iterator();
    }

    public void addToIndices(java.lang.String elem) {
      if (this.indices == null) {
        this.indices = new java.util.ArrayList<java.lang.String>();
      }
      this.indices.add(elem);
    }

    public java.util.List<java.lang.String> getIndices() {
      return this.indices;
    }

    public count_args setIndices(java.util.List<java.lang.String> indices) {
      this.indices = indices;
      return this;
    }

    public void unsetIndices() {
      this.indices = null;
    }

    /** Returns true if field indices is set (has been assigned a value) and false otherwise */
    public boolean isSetIndices() {
      return this.indices != null;
    }

    public void setIndicesIsSet(boolean value) {
      if (!value) {
        this.indices = null;
      }
    }

    public int getTypesSize() {
      return (this.types == null) ? 0 : this.types.size();
    }

    public java.util.Iterator<java.lang.String> getTypesIterator() {
      return (this.types == null) ? null : this.types.iterator();
    }

    public void addToTypes(java.lang.String elem) {
      if (this.types == null) {
        this.types = new java.util.ArrayList<java.lang.String>();
      }
      this.types.add(elem);
    }

    public java.util.List<java.lang.String> getTypes() {
      return this.types;
    }

    public count_args setTypes(java.util.List<java.lang.String> types) {
      this.types = types;
      return this;
    }

    public void unsetTypes() {
      this.types = null;
    }

    /** Returns true if field types is set (has been assigned a value) and false otherwise */
    public boolean isSetTypes() {
      return this.types != null;
    }

    public void setTypesIsSet(boolean value) {
      if (!value) {
        this.types = null;
      }
    }

    public int getRoutingsSize() {
      return (this.routings == null) ? 0 : this.routings.size();
    }

    public java.util.Iterator<java.lang.String> getRoutingsIterator() {
      return (this.routings == null) ? null : this.routings.iterator();
    }

    public void addToRoutings(java.lang.String elem) {
      if (this.routings == null) {
        this.routings = new java.util.ArrayList<java.lang.String>();
      }
      this.routings.add(elem);
    }

    public java.util.List<java.lang.String> getRoutings() {
      return this.routings;
    }

    public count_args setRoutings(java.util.List<java.lang.String> routings) {
      this.routings = routings;
      return this;
    }

    public void unsetRoutings() {
      this.routings = null;
    }

    /** Returns true if field routings is set (has been assigned a value) and false otherwise */
    public boolean isSetRoutings() {
      return this.routings != null;
    }

    public void setRoutingsIsSet(boolean value) {
      if (!value) {
        this.routings = null;
      }
    }

    public java.lang.String getTimeKey() {
      return this.timeKey;
    }

    public count_args setTimeKey(java.lang.String timeKey) {
      this.timeKey = timeKey;
      return this;
    }

    public void unsetTimeKey() {
      this.timeKey = null;
    }

    /** Returns true if field timeKey is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeKey() {
      return this.timeKey != null;
    }

    public void setTimeKeyIsSet(boolean value) {
      if (!value) {
        this.timeKey = null;
      }
    }

    public long getS() {
      return this.s;
    }

    public count_args setS(long s) {
      this.s = s;
      setSIsSet(true);
      return this;
    }

    public void unsetS() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
    }

    /** Returns true if field s is set (has been assigned a value) and false otherwise */
    public boolean isSetS() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
    }

    public void setSIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
    }

    public long getE() {
      return this.e;
    }

    public count_args setE(long e) {
      this.e = e;
      setEIsSet(true);
      return this;
    }

    public void unsetE() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __E_ISSET_ID);
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __E_ISSET_ID);
    }

    public void setEIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __E_ISSET_ID, value);
    }

    public java.lang.String getRule() {
      return this.rule;
    }

    public count_args setRule(java.lang.String rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INDICES:
        if (value == null) {
          unsetIndices();
        } else {
          setIndices((java.util.List<java.lang.String>)value);
        }
        break;

      case TYPES:
        if (value == null) {
          unsetTypes();
        } else {
          setTypes((java.util.List<java.lang.String>)value);
        }
        break;

      case ROUTINGS:
        if (value == null) {
          unsetRoutings();
        } else {
          setRoutings((java.util.List<java.lang.String>)value);
        }
        break;

      case TIME_KEY:
        if (value == null) {
          unsetTimeKey();
        } else {
          setTimeKey((java.lang.String)value);
        }
        break;

      case S:
        if (value == null) {
          unsetS();
        } else {
          setS((java.lang.Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((java.lang.Long)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INDICES:
        return getIndices();

      case TYPES:
        return getTypes();

      case ROUTINGS:
        return getRoutings();

      case TIME_KEY:
        return getTimeKey();

      case S:
        return getS();

      case E:
        return getE();

      case RULE:
        return getRule();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INDICES:
        return isSetIndices();
      case TYPES:
        return isSetTypes();
      case ROUTINGS:
        return isSetRoutings();
      case TIME_KEY:
        return isSetTimeKey();
      case S:
        return isSetS();
      case E:
        return isSetE();
      case RULE:
        return isSetRule();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof count_args)
        return this.equals((count_args)that);
      return false;
    }

    public boolean equals(count_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_indices = true && this.isSetIndices();
      boolean that_present_indices = true && that.isSetIndices();
      if (this_present_indices || that_present_indices) {
        if (!(this_present_indices && that_present_indices))
          return false;
        if (!this.indices.equals(that.indices))
          return false;
      }

      boolean this_present_types = true && this.isSetTypes();
      boolean that_present_types = true && that.isSetTypes();
      if (this_present_types || that_present_types) {
        if (!(this_present_types && that_present_types))
          return false;
        if (!this.types.equals(that.types))
          return false;
      }

      boolean this_present_routings = true && this.isSetRoutings();
      boolean that_present_routings = true && that.isSetRoutings();
      if (this_present_routings || that_present_routings) {
        if (!(this_present_routings && that_present_routings))
          return false;
        if (!this.routings.equals(that.routings))
          return false;
      }

      boolean this_present_timeKey = true && this.isSetTimeKey();
      boolean that_present_timeKey = true && that.isSetTimeKey();
      if (this_present_timeKey || that_present_timeKey) {
        if (!(this_present_timeKey && that_present_timeKey))
          return false;
        if (!this.timeKey.equals(that.timeKey))
          return false;
      }

      boolean this_present_s = true;
      boolean that_present_s = true;
      if (this_present_s || that_present_s) {
        if (!(this_present_s && that_present_s))
          return false;
        if (this.s != that.s)
          return false;
      }

      boolean this_present_e = true;
      boolean that_present_e = true;
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (this.e != that.e)
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIndices()) ? 131071 : 524287);
      if (isSetIndices())
        hashCode = hashCode * 8191 + indices.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypes()) ? 131071 : 524287);
      if (isSetTypes())
        hashCode = hashCode * 8191 + types.hashCode();

      hashCode = hashCode * 8191 + ((isSetRoutings()) ? 131071 : 524287);
      if (isSetRoutings())
        hashCode = hashCode * 8191 + routings.hashCode();

      hashCode = hashCode * 8191 + ((isSetTimeKey()) ? 131071 : 524287);
      if (isSetTimeKey())
        hashCode = hashCode * 8191 + timeKey.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(s);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(e);

      hashCode = hashCode * 8191 + ((isSetRule()) ? 131071 : 524287);
      if (isSetRule())
        hashCode = hashCode * 8191 + rule.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(count_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIndices()).compareTo(other.isSetIndices());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndices()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indices, other.indices);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoutings()).compareTo(other.isSetRoutings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoutings()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routings, other.routings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeKey()).compareTo(other.isSetTimeKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeKey, other.timeKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("count_args(");
      boolean first = true;

      sb.append("indices:");
      if (this.indices == null) {
        sb.append("null");
      } else {
        sb.append(this.indices);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("routings:");
      if (this.routings == null) {
        sb.append("null");
      } else {
        sb.append(this.routings);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeKey:");
      if (this.timeKey == null) {
        sb.append("null");
      } else {
        sb.append(this.timeKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s:");
      sb.append(this.s);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class count_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public count_argsStandardScheme getScheme() {
        return new count_argsStandardScheme();
      }
    }

    private static class count_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<count_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, count_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDICES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.indices = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.indices.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setIndicesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.types = new java.util.ArrayList<java.lang.String>(_list3.size);
                  java.lang.String _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = iprot.readString();
                    struct.types.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROUTINGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                  struct.routings = new java.util.ArrayList<java.lang.String>(_list6.size);
                  java.lang.String _elem7;
                  for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                  {
                    _elem7 = iprot.readString();
                    struct.routings.add(_elem7);
                  }
                  iprot.readListEnd();
                }
                struct.setRoutingsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TIME_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timeKey = iprot.readString();
                struct.setTimeKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // S
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.s = iprot.readI64();
                struct.setSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.e = iprot.readI64();
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rule = iprot.readString();
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, count_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.indices != null) {
          oprot.writeFieldBegin(INDICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.indices.size()));
            for (java.lang.String _iter9 : struct.indices)
            {
              oprot.writeString(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.types != null) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.types.size()));
            for (java.lang.String _iter10 : struct.types)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.routings != null) {
          oprot.writeFieldBegin(ROUTINGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.routings.size()));
            for (java.lang.String _iter11 : struct.routings)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.timeKey != null) {
          oprot.writeFieldBegin(TIME_KEY_FIELD_DESC);
          oprot.writeString(struct.timeKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(S_FIELD_DESC);
        oprot.writeI64(struct.s);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(E_FIELD_DESC);
        oprot.writeI64(struct.e);
        oprot.writeFieldEnd();
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          oprot.writeString(struct.rule);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class count_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public count_argsTupleScheme getScheme() {
        return new count_argsTupleScheme();
      }
    }

    private static class count_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<count_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, count_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndices()) {
          optionals.set(0);
        }
        if (struct.isSetTypes()) {
          optionals.set(1);
        }
        if (struct.isSetRoutings()) {
          optionals.set(2);
        }
        if (struct.isSetTimeKey()) {
          optionals.set(3);
        }
        if (struct.isSetS()) {
          optionals.set(4);
        }
        if (struct.isSetE()) {
          optionals.set(5);
        }
        if (struct.isSetRule()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetIndices()) {
          {
            oprot.writeI32(struct.indices.size());
            for (java.lang.String _iter12 : struct.indices)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetTypes()) {
          {
            oprot.writeI32(struct.types.size());
            for (java.lang.String _iter13 : struct.types)
            {
              oprot.writeString(_iter13);
            }
          }
        }
        if (struct.isSetRoutings()) {
          {
            oprot.writeI32(struct.routings.size());
            for (java.lang.String _iter14 : struct.routings)
            {
              oprot.writeString(_iter14);
            }
          }
        }
        if (struct.isSetTimeKey()) {
          oprot.writeString(struct.timeKey);
        }
        if (struct.isSetS()) {
          oprot.writeI64(struct.s);
        }
        if (struct.isSetE()) {
          oprot.writeI64(struct.e);
        }
        if (struct.isSetRule()) {
          oprot.writeString(struct.rule);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, count_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.indices = new java.util.ArrayList<java.lang.String>(_list15.size);
            java.lang.String _elem16;
            for (int _i17 = 0; _i17 < _list15.size; ++_i17)
            {
              _elem16 = iprot.readString();
              struct.indices.add(_elem16);
            }
          }
          struct.setIndicesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.types = new java.util.ArrayList<java.lang.String>(_list18.size);
            java.lang.String _elem19;
            for (int _i20 = 0; _i20 < _list18.size; ++_i20)
            {
              _elem19 = iprot.readString();
              struct.types.add(_elem19);
            }
          }
          struct.setTypesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.routings = new java.util.ArrayList<java.lang.String>(_list21.size);
            java.lang.String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.routings.add(_elem22);
            }
          }
          struct.setRoutingsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.timeKey = iprot.readString();
          struct.setTimeKeyIsSet(true);
        }
        if (incoming.get(4)) {
          struct.s = iprot.readI64();
          struct.setSIsSet(true);
        }
        if (incoming.get(5)) {
          struct.e = iprot.readI64();
          struct.setEIsSet(true);
        }
        if (incoming.get(6)) {
          struct.rule = iprot.readString();
          struct.setRuleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class count_result implements org.apache.thrift.TBase<count_result, count_result._Fields>, java.io.Serializable, Cloneable, Comparable<count_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("count_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new count_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new count_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(count_result.class, metaDataMap);
    }

    public count_result() {
    }

    public count_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public count_result(count_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public count_result deepCopy() {
      return new count_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public count_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof count_result)
        return this.equals((count_result)that);
      return false;
    }

    public boolean equals(count_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(count_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("count_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class count_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public count_resultStandardScheme getScheme() {
        return new count_resultStandardScheme();
      }
    }

    private static class count_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<count_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, count_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, count_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class count_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public count_resultTupleScheme getScheme() {
        return new count_resultTupleScheme();
      }
    }

    private static class count_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<count_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, count_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, count_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryForList_args implements org.apache.thrift.TBase<queryForList_args, queryForList_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryForList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForList_args");

    private static final org.apache.thrift.protocol.TField INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("indices", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ROUTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("routings", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField TIME_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("timeKey", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.I64, (short)7);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField F_FIELD_DESC = new org.apache.thrift.protocol.TField("f", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)10);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryForList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryForList_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> indices; // required
    public java.util.List<java.lang.String> types; // required
    public java.util.List<java.lang.String> routings; // required
    public java.util.List<java.lang.String> fields; // required
    public java.lang.String timeKey; // required
    public long s; // required
    public long e; // required
    public java.lang.String rule; // required
    public int f; // required
    public int size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDICES((short)1, "indices"),
      TYPES((short)2, "types"),
      ROUTINGS((short)3, "routings"),
      FIELDS((short)4, "fields"),
      TIME_KEY((short)5, "timeKey"),
      S((short)6, "s"),
      E((short)7, "e"),
      RULE((short)8, "rule"),
      F((short)9, "f"),
      SIZE((short)10, "size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDICES
            return INDICES;
          case 2: // TYPES
            return TYPES;
          case 3: // ROUTINGS
            return ROUTINGS;
          case 4: // FIELDS
            return FIELDS;
          case 5: // TIME_KEY
            return TIME_KEY;
          case 6: // S
            return S;
          case 7: // E
            return E;
          case 8: // RULE
            return RULE;
          case 9: // F
            return F;
          case 10: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __S_ISSET_ID = 0;
    private static final int __E_ISSET_ID = 1;
    private static final int __F_ISSET_ID = 2;
    private static final int __SIZE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDICES, new org.apache.thrift.meta_data.FieldMetaData("indices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ROUTINGS, new org.apache.thrift.meta_data.FieldMetaData("routings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME_KEY, new org.apache.thrift.meta_data.FieldMetaData("timeKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.F, new org.apache.thrift.meta_data.FieldMetaData("f", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForList_args.class, metaDataMap);
    }

    public queryForList_args() {
    }

    public queryForList_args(
      java.util.List<java.lang.String> indices,
      java.util.List<java.lang.String> types,
      java.util.List<java.lang.String> routings,
      java.util.List<java.lang.String> fields,
      java.lang.String timeKey,
      long s,
      long e,
      java.lang.String rule,
      int f,
      int size)
    {
      this();
      this.indices = indices;
      this.types = types;
      this.routings = routings;
      this.fields = fields;
      this.timeKey = timeKey;
      this.s = s;
      setSIsSet(true);
      this.e = e;
      setEIsSet(true);
      this.rule = rule;
      this.f = f;
      setFIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForList_args(queryForList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIndices()) {
        java.util.List<java.lang.String> __this__indices = new java.util.ArrayList<java.lang.String>(other.indices);
        this.indices = __this__indices;
      }
      if (other.isSetTypes()) {
        java.util.List<java.lang.String> __this__types = new java.util.ArrayList<java.lang.String>(other.types);
        this.types = __this__types;
      }
      if (other.isSetRoutings()) {
        java.util.List<java.lang.String> __this__routings = new java.util.ArrayList<java.lang.String>(other.routings);
        this.routings = __this__routings;
      }
      if (other.isSetFields()) {
        java.util.List<java.lang.String> __this__fields = new java.util.ArrayList<java.lang.String>(other.fields);
        this.fields = __this__fields;
      }
      if (other.isSetTimeKey()) {
        this.timeKey = other.timeKey;
      }
      this.s = other.s;
      this.e = other.e;
      if (other.isSetRule()) {
        this.rule = other.rule;
      }
      this.f = other.f;
      this.size = other.size;
    }

    public queryForList_args deepCopy() {
      return new queryForList_args(this);
    }

    @Override
    public void clear() {
      this.indices = null;
      this.types = null;
      this.routings = null;
      this.fields = null;
      this.timeKey = null;
      setSIsSet(false);
      this.s = 0;
      setEIsSet(false);
      this.e = 0;
      this.rule = null;
      setFIsSet(false);
      this.f = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public int getIndicesSize() {
      return (this.indices == null) ? 0 : this.indices.size();
    }

    public java.util.Iterator<java.lang.String> getIndicesIterator() {
      return (this.indices == null) ? null : this.indices.iterator();
    }

    public void addToIndices(java.lang.String elem) {
      if (this.indices == null) {
        this.indices = new java.util.ArrayList<java.lang.String>();
      }
      this.indices.add(elem);
    }

    public java.util.List<java.lang.String> getIndices() {
      return this.indices;
    }

    public queryForList_args setIndices(java.util.List<java.lang.String> indices) {
      this.indices = indices;
      return this;
    }

    public void unsetIndices() {
      this.indices = null;
    }

    /** Returns true if field indices is set (has been assigned a value) and false otherwise */
    public boolean isSetIndices() {
      return this.indices != null;
    }

    public void setIndicesIsSet(boolean value) {
      if (!value) {
        this.indices = null;
      }
    }

    public int getTypesSize() {
      return (this.types == null) ? 0 : this.types.size();
    }

    public java.util.Iterator<java.lang.String> getTypesIterator() {
      return (this.types == null) ? null : this.types.iterator();
    }

    public void addToTypes(java.lang.String elem) {
      if (this.types == null) {
        this.types = new java.util.ArrayList<java.lang.String>();
      }
      this.types.add(elem);
    }

    public java.util.List<java.lang.String> getTypes() {
      return this.types;
    }

    public queryForList_args setTypes(java.util.List<java.lang.String> types) {
      this.types = types;
      return this;
    }

    public void unsetTypes() {
      this.types = null;
    }

    /** Returns true if field types is set (has been assigned a value) and false otherwise */
    public boolean isSetTypes() {
      return this.types != null;
    }

    public void setTypesIsSet(boolean value) {
      if (!value) {
        this.types = null;
      }
    }

    public int getRoutingsSize() {
      return (this.routings == null) ? 0 : this.routings.size();
    }

    public java.util.Iterator<java.lang.String> getRoutingsIterator() {
      return (this.routings == null) ? null : this.routings.iterator();
    }

    public void addToRoutings(java.lang.String elem) {
      if (this.routings == null) {
        this.routings = new java.util.ArrayList<java.lang.String>();
      }
      this.routings.add(elem);
    }

    public java.util.List<java.lang.String> getRoutings() {
      return this.routings;
    }

    public queryForList_args setRoutings(java.util.List<java.lang.String> routings) {
      this.routings = routings;
      return this;
    }

    public void unsetRoutings() {
      this.routings = null;
    }

    /** Returns true if field routings is set (has been assigned a value) and false otherwise */
    public boolean isSetRoutings() {
      return this.routings != null;
    }

    public void setRoutingsIsSet(boolean value) {
      if (!value) {
        this.routings = null;
      }
    }

    public int getFieldsSize() {
      return (this.fields == null) ? 0 : this.fields.size();
    }

    public java.util.Iterator<java.lang.String> getFieldsIterator() {
      return (this.fields == null) ? null : this.fields.iterator();
    }

    public void addToFields(java.lang.String elem) {
      if (this.fields == null) {
        this.fields = new java.util.ArrayList<java.lang.String>();
      }
      this.fields.add(elem);
    }

    public java.util.List<java.lang.String> getFields() {
      return this.fields;
    }

    public queryForList_args setFields(java.util.List<java.lang.String> fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been assigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public java.lang.String getTimeKey() {
      return this.timeKey;
    }

    public queryForList_args setTimeKey(java.lang.String timeKey) {
      this.timeKey = timeKey;
      return this;
    }

    public void unsetTimeKey() {
      this.timeKey = null;
    }

    /** Returns true if field timeKey is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeKey() {
      return this.timeKey != null;
    }

    public void setTimeKeyIsSet(boolean value) {
      if (!value) {
        this.timeKey = null;
      }
    }

    public long getS() {
      return this.s;
    }

    public queryForList_args setS(long s) {
      this.s = s;
      setSIsSet(true);
      return this;
    }

    public void unsetS() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
    }

    /** Returns true if field s is set (has been assigned a value) and false otherwise */
    public boolean isSetS() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
    }

    public void setSIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
    }

    public long getE() {
      return this.e;
    }

    public queryForList_args setE(long e) {
      this.e = e;
      setEIsSet(true);
      return this;
    }

    public void unsetE() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __E_ISSET_ID);
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __E_ISSET_ID);
    }

    public void setEIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __E_ISSET_ID, value);
    }

    public java.lang.String getRule() {
      return this.rule;
    }

    public queryForList_args setRule(java.lang.String rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public int getF() {
      return this.f;
    }

    public queryForList_args setF(int f) {
      this.f = f;
      setFIsSet(true);
      return this;
    }

    public void unsetF() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __F_ISSET_ID);
    }

    /** Returns true if field f is set (has been assigned a value) and false otherwise */
    public boolean isSetF() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __F_ISSET_ID);
    }

    public void setFIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __F_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public queryForList_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INDICES:
        if (value == null) {
          unsetIndices();
        } else {
          setIndices((java.util.List<java.lang.String>)value);
        }
        break;

      case TYPES:
        if (value == null) {
          unsetTypes();
        } else {
          setTypes((java.util.List<java.lang.String>)value);
        }
        break;

      case ROUTINGS:
        if (value == null) {
          unsetRoutings();
        } else {
          setRoutings((java.util.List<java.lang.String>)value);
        }
        break;

      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((java.util.List<java.lang.String>)value);
        }
        break;

      case TIME_KEY:
        if (value == null) {
          unsetTimeKey();
        } else {
          setTimeKey((java.lang.String)value);
        }
        break;

      case S:
        if (value == null) {
          unsetS();
        } else {
          setS((java.lang.Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((java.lang.Long)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((java.lang.String)value);
        }
        break;

      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((java.lang.Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INDICES:
        return getIndices();

      case TYPES:
        return getTypes();

      case ROUTINGS:
        return getRoutings();

      case FIELDS:
        return getFields();

      case TIME_KEY:
        return getTimeKey();

      case S:
        return getS();

      case E:
        return getE();

      case RULE:
        return getRule();

      case F:
        return getF();

      case SIZE:
        return getSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INDICES:
        return isSetIndices();
      case TYPES:
        return isSetTypes();
      case ROUTINGS:
        return isSetRoutings();
      case FIELDS:
        return isSetFields();
      case TIME_KEY:
        return isSetTimeKey();
      case S:
        return isSetS();
      case E:
        return isSetE();
      case RULE:
        return isSetRule();
      case F:
        return isSetF();
      case SIZE:
        return isSetSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForList_args)
        return this.equals((queryForList_args)that);
      return false;
    }

    public boolean equals(queryForList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_indices = true && this.isSetIndices();
      boolean that_present_indices = true && that.isSetIndices();
      if (this_present_indices || that_present_indices) {
        if (!(this_present_indices && that_present_indices))
          return false;
        if (!this.indices.equals(that.indices))
          return false;
      }

      boolean this_present_types = true && this.isSetTypes();
      boolean that_present_types = true && that.isSetTypes();
      if (this_present_types || that_present_types) {
        if (!(this_present_types && that_present_types))
          return false;
        if (!this.types.equals(that.types))
          return false;
      }

      boolean this_present_routings = true && this.isSetRoutings();
      boolean that_present_routings = true && that.isSetRoutings();
      if (this_present_routings || that_present_routings) {
        if (!(this_present_routings && that_present_routings))
          return false;
        if (!this.routings.equals(that.routings))
          return false;
      }

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      boolean this_present_timeKey = true && this.isSetTimeKey();
      boolean that_present_timeKey = true && that.isSetTimeKey();
      if (this_present_timeKey || that_present_timeKey) {
        if (!(this_present_timeKey && that_present_timeKey))
          return false;
        if (!this.timeKey.equals(that.timeKey))
          return false;
      }

      boolean this_present_s = true;
      boolean that_present_s = true;
      if (this_present_s || that_present_s) {
        if (!(this_present_s && that_present_s))
          return false;
        if (this.s != that.s)
          return false;
      }

      boolean this_present_e = true;
      boolean that_present_e = true;
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (this.e != that.e)
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      boolean this_present_f = true;
      boolean that_present_f = true;
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (this.f != that.f)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIndices()) ? 131071 : 524287);
      if (isSetIndices())
        hashCode = hashCode * 8191 + indices.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypes()) ? 131071 : 524287);
      if (isSetTypes())
        hashCode = hashCode * 8191 + types.hashCode();

      hashCode = hashCode * 8191 + ((isSetRoutings()) ? 131071 : 524287);
      if (isSetRoutings())
        hashCode = hashCode * 8191 + routings.hashCode();

      hashCode = hashCode * 8191 + ((isSetFields()) ? 131071 : 524287);
      if (isSetFields())
        hashCode = hashCode * 8191 + fields.hashCode();

      hashCode = hashCode * 8191 + ((isSetTimeKey()) ? 131071 : 524287);
      if (isSetTimeKey())
        hashCode = hashCode * 8191 + timeKey.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(s);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(e);

      hashCode = hashCode * 8191 + ((isSetRule()) ? 131071 : 524287);
      if (isSetRule())
        hashCode = hashCode * 8191 + rule.hashCode();

      hashCode = hashCode * 8191 + f;

      hashCode = hashCode * 8191 + size;

      return hashCode;
    }

    @Override
    public int compareTo(queryForList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIndices()).compareTo(other.isSetIndices());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndices()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indices, other.indices);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoutings()).compareTo(other.isSetRoutings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoutings()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routings, other.routings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeKey()).compareTo(other.isSetTimeKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeKey, other.timeKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetF()).compareTo(other.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f, other.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryForList_args(");
      boolean first = true;

      sb.append("indices:");
      if (this.indices == null) {
        sb.append("null");
      } else {
        sb.append(this.indices);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("routings:");
      if (this.routings == null) {
        sb.append("null");
      } else {
        sb.append(this.routings);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeKey:");
      if (this.timeKey == null) {
        sb.append("null");
      } else {
        sb.append(this.timeKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s:");
      sb.append(this.s);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("f:");
      sb.append(this.f);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryForList_argsStandardScheme getScheme() {
        return new queryForList_argsStandardScheme();
      }
    }

    private static class queryForList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryForList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDICES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.indices = new java.util.ArrayList<java.lang.String>(_list24.size);
                  java.lang.String _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = iprot.readString();
                    struct.indices.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setIndicesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                  struct.types = new java.util.ArrayList<java.lang.String>(_list27.size);
                  java.lang.String _elem28;
                  for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                  {
                    _elem28 = iprot.readString();
                    struct.types.add(_elem28);
                  }
                  iprot.readListEnd();
                }
                struct.setTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROUTINGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                  struct.routings = new java.util.ArrayList<java.lang.String>(_list30.size);
                  java.lang.String _elem31;
                  for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                  {
                    _elem31 = iprot.readString();
                    struct.routings.add(_elem31);
                  }
                  iprot.readListEnd();
                }
                struct.setRoutingsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                  struct.fields = new java.util.ArrayList<java.lang.String>(_list33.size);
                  java.lang.String _elem34;
                  for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                  {
                    _elem34 = iprot.readString();
                    struct.fields.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIME_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timeKey = iprot.readString();
                struct.setTimeKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // S
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.s = iprot.readI64();
                struct.setSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.e = iprot.readI64();
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rule = iprot.readString();
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // F
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.f = iprot.readI32();
                struct.setFIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.indices != null) {
          oprot.writeFieldBegin(INDICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.indices.size()));
            for (java.lang.String _iter36 : struct.indices)
            {
              oprot.writeString(_iter36);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.types != null) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.types.size()));
            for (java.lang.String _iter37 : struct.types)
            {
              oprot.writeString(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.routings != null) {
          oprot.writeFieldBegin(ROUTINGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.routings.size()));
            for (java.lang.String _iter38 : struct.routings)
            {
              oprot.writeString(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.fields != null) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
            for (java.lang.String _iter39 : struct.fields)
            {
              oprot.writeString(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.timeKey != null) {
          oprot.writeFieldBegin(TIME_KEY_FIELD_DESC);
          oprot.writeString(struct.timeKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(S_FIELD_DESC);
        oprot.writeI64(struct.s);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(E_FIELD_DESC);
        oprot.writeI64(struct.e);
        oprot.writeFieldEnd();
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          oprot.writeString(struct.rule);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(F_FIELD_DESC);
        oprot.writeI32(struct.f);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryForList_argsTupleScheme getScheme() {
        return new queryForList_argsTupleScheme();
      }
    }

    private static class queryForList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryForList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndices()) {
          optionals.set(0);
        }
        if (struct.isSetTypes()) {
          optionals.set(1);
        }
        if (struct.isSetRoutings()) {
          optionals.set(2);
        }
        if (struct.isSetFields()) {
          optionals.set(3);
        }
        if (struct.isSetTimeKey()) {
          optionals.set(4);
        }
        if (struct.isSetS()) {
          optionals.set(5);
        }
        if (struct.isSetE()) {
          optionals.set(6);
        }
        if (struct.isSetRule()) {
          optionals.set(7);
        }
        if (struct.isSetF()) {
          optionals.set(8);
        }
        if (struct.isSetSize()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetIndices()) {
          {
            oprot.writeI32(struct.indices.size());
            for (java.lang.String _iter40 : struct.indices)
            {
              oprot.writeString(_iter40);
            }
          }
        }
        if (struct.isSetTypes()) {
          {
            oprot.writeI32(struct.types.size());
            for (java.lang.String _iter41 : struct.types)
            {
              oprot.writeString(_iter41);
            }
          }
        }
        if (struct.isSetRoutings()) {
          {
            oprot.writeI32(struct.routings.size());
            for (java.lang.String _iter42 : struct.routings)
            {
              oprot.writeString(_iter42);
            }
          }
        }
        if (struct.isSetFields()) {
          {
            oprot.writeI32(struct.fields.size());
            for (java.lang.String _iter43 : struct.fields)
            {
              oprot.writeString(_iter43);
            }
          }
        }
        if (struct.isSetTimeKey()) {
          oprot.writeString(struct.timeKey);
        }
        if (struct.isSetS()) {
          oprot.writeI64(struct.s);
        }
        if (struct.isSetE()) {
          oprot.writeI64(struct.e);
        }
        if (struct.isSetRule()) {
          oprot.writeString(struct.rule);
        }
        if (struct.isSetF()) {
          oprot.writeI32(struct.f);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.indices = new java.util.ArrayList<java.lang.String>(_list44.size);
            java.lang.String _elem45;
            for (int _i46 = 0; _i46 < _list44.size; ++_i46)
            {
              _elem45 = iprot.readString();
              struct.indices.add(_elem45);
            }
          }
          struct.setIndicesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.types = new java.util.ArrayList<java.lang.String>(_list47.size);
            java.lang.String _elem48;
            for (int _i49 = 0; _i49 < _list47.size; ++_i49)
            {
              _elem48 = iprot.readString();
              struct.types.add(_elem48);
            }
          }
          struct.setTypesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.routings = new java.util.ArrayList<java.lang.String>(_list50.size);
            java.lang.String _elem51;
            for (int _i52 = 0; _i52 < _list50.size; ++_i52)
            {
              _elem51 = iprot.readString();
              struct.routings.add(_elem51);
            }
          }
          struct.setRoutingsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.fields = new java.util.ArrayList<java.lang.String>(_list53.size);
            java.lang.String _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = iprot.readString();
              struct.fields.add(_elem54);
            }
          }
          struct.setFieldsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.timeKey = iprot.readString();
          struct.setTimeKeyIsSet(true);
        }
        if (incoming.get(5)) {
          struct.s = iprot.readI64();
          struct.setSIsSet(true);
        }
        if (incoming.get(6)) {
          struct.e = iprot.readI64();
          struct.setEIsSet(true);
        }
        if (incoming.get(7)) {
          struct.rule = iprot.readString();
          struct.setRuleIsSet(true);
        }
        if (incoming.get(8)) {
          struct.f = iprot.readI32();
          struct.setFIsSet(true);
        }
        if (incoming.get(9)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryForList_result implements org.apache.thrift.TBase<queryForList_result, queryForList_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryForList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryForList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryForList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryForList_resultTupleSchemeFactory();

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryForList_result.class, metaDataMap);
    }

    public queryForList_result() {
    }

    public queryForList_result(
      java.util.List<java.util.Map<java.lang.String,java.lang.String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryForList_result(queryForList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.Map<java.lang.String,java.lang.String>> __this__success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(other.success.size());
        for (java.util.Map<java.lang.String,java.lang.String> other_element : other.success) {
          java.util.Map<java.lang.String,java.lang.String> __this__success_copy = new java.util.HashMap<java.lang.String,java.lang.String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public queryForList_result deepCopy() {
      return new queryForList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.util.Map<java.lang.String,java.lang.String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.Map<java.lang.String,java.lang.String> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getSuccess() {
      return this.success;
    }

    public queryForList_result setSuccess(java.util.List<java.util.Map<java.lang.String,java.lang.String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryForList_result)
        return this.equals((queryForList_result)that);
      return false;
    }

    public boolean equals(queryForList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryForList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryForList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryForList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryForList_resultStandardScheme getScheme() {
        return new queryForList_resultStandardScheme();
      }
    }

    private static class queryForList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryForList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryForList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list56.size);
                  java.util.Map<java.lang.String,java.lang.String> _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map59 = iprot.readMapBegin();
                      _elem57 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map59.size);
                      java.lang.String _key60;
                      java.lang.String _val61;
                      for (int _i62 = 0; _i62 < _map59.size; ++_i62)
                      {
                        _key60 = iprot.readString();
                        _val61 = iprot.readString();
                        _elem57.put(_key60, _val61);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryForList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (java.util.Map<java.lang.String,java.lang.String> _iter63 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter63.size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter64 : _iter63.entrySet())
                {
                  oprot.writeString(_iter64.getKey());
                  oprot.writeString(_iter64.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryForList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryForList_resultTupleScheme getScheme() {
        return new queryForList_resultTupleScheme();
      }
    }

    private static class queryForList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryForList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryForList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map<java.lang.String,java.lang.String> _iter65 : struct.success)
            {
              {
                oprot.writeI32(_iter65.size());
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter66 : _iter65.entrySet())
                {
                  oprot.writeString(_iter66.getKey());
                  oprot.writeString(_iter66.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryForList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list67.size);
            java.util.Map<java.lang.String,java.lang.String> _elem68;
            for (int _i69 = 0; _i69 < _list67.size; ++_i69)
            {
              {
                org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem68 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map70.size);
                java.lang.String _key71;
                java.lang.String _val72;
                for (int _i73 = 0; _i73 < _map70.size; ++_i73)
                {
                  _key71 = iprot.readString();
                  _val72 = iprot.readString();
                  _elem68.put(_key71, _val72);
                }
              }
              struct.success.add(_elem68);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exportList_args implements org.apache.thrift.TBase<exportList_args, exportList_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportList_args");

    private static final org.apache.thrift.protocol.TField INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("indices", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ROUTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("routings", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField TIME_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("timeKey", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.I64, (short)7);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField FIRST_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("firstField", org.apache.thrift.protocol.TType.STRING, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exportList_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exportList_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> indices; // required
    public java.util.List<java.lang.String> types; // required
    public java.util.List<java.lang.String> routings; // required
    public java.util.List<java.lang.String> fields; // required
    public java.lang.String timeKey; // required
    public long s; // required
    public long e; // required
    public java.lang.String rule; // required
    public java.lang.String firstField; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDICES((short)1, "indices"),
      TYPES((short)2, "types"),
      ROUTINGS((short)3, "routings"),
      FIELDS((short)4, "fields"),
      TIME_KEY((short)5, "timeKey"),
      S((short)6, "s"),
      E((short)7, "e"),
      RULE((short)8, "rule"),
      FIRST_FIELD((short)9, "firstField");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDICES
            return INDICES;
          case 2: // TYPES
            return TYPES;
          case 3: // ROUTINGS
            return ROUTINGS;
          case 4: // FIELDS
            return FIELDS;
          case 5: // TIME_KEY
            return TIME_KEY;
          case 6: // S
            return S;
          case 7: // E
            return E;
          case 8: // RULE
            return RULE;
          case 9: // FIRST_FIELD
            return FIRST_FIELD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __S_ISSET_ID = 0;
    private static final int __E_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDICES, new org.apache.thrift.meta_data.FieldMetaData("indices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ROUTINGS, new org.apache.thrift.meta_data.FieldMetaData("routings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME_KEY, new org.apache.thrift.meta_data.FieldMetaData("timeKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIRST_FIELD, new org.apache.thrift.meta_data.FieldMetaData("firstField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportList_args.class, metaDataMap);
    }

    public exportList_args() {
    }

    public exportList_args(
      java.util.List<java.lang.String> indices,
      java.util.List<java.lang.String> types,
      java.util.List<java.lang.String> routings,
      java.util.List<java.lang.String> fields,
      java.lang.String timeKey,
      long s,
      long e,
      java.lang.String rule,
      java.lang.String firstField)
    {
      this();
      this.indices = indices;
      this.types = types;
      this.routings = routings;
      this.fields = fields;
      this.timeKey = timeKey;
      this.s = s;
      setSIsSet(true);
      this.e = e;
      setEIsSet(true);
      this.rule = rule;
      this.firstField = firstField;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportList_args(exportList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIndices()) {
        java.util.List<java.lang.String> __this__indices = new java.util.ArrayList<java.lang.String>(other.indices);
        this.indices = __this__indices;
      }
      if (other.isSetTypes()) {
        java.util.List<java.lang.String> __this__types = new java.util.ArrayList<java.lang.String>(other.types);
        this.types = __this__types;
      }
      if (other.isSetRoutings()) {
        java.util.List<java.lang.String> __this__routings = new java.util.ArrayList<java.lang.String>(other.routings);
        this.routings = __this__routings;
      }
      if (other.isSetFields()) {
        java.util.List<java.lang.String> __this__fields = new java.util.ArrayList<java.lang.String>(other.fields);
        this.fields = __this__fields;
      }
      if (other.isSetTimeKey()) {
        this.timeKey = other.timeKey;
      }
      this.s = other.s;
      this.e = other.e;
      if (other.isSetRule()) {
        this.rule = other.rule;
      }
      if (other.isSetFirstField()) {
        this.firstField = other.firstField;
      }
    }

    public exportList_args deepCopy() {
      return new exportList_args(this);
    }

    @Override
    public void clear() {
      this.indices = null;
      this.types = null;
      this.routings = null;
      this.fields = null;
      this.timeKey = null;
      setSIsSet(false);
      this.s = 0;
      setEIsSet(false);
      this.e = 0;
      this.rule = null;
      this.firstField = null;
    }

    public int getIndicesSize() {
      return (this.indices == null) ? 0 : this.indices.size();
    }

    public java.util.Iterator<java.lang.String> getIndicesIterator() {
      return (this.indices == null) ? null : this.indices.iterator();
    }

    public void addToIndices(java.lang.String elem) {
      if (this.indices == null) {
        this.indices = new java.util.ArrayList<java.lang.String>();
      }
      this.indices.add(elem);
    }

    public java.util.List<java.lang.String> getIndices() {
      return this.indices;
    }

    public exportList_args setIndices(java.util.List<java.lang.String> indices) {
      this.indices = indices;
      return this;
    }

    public void unsetIndices() {
      this.indices = null;
    }

    /** Returns true if field indices is set (has been assigned a value) and false otherwise */
    public boolean isSetIndices() {
      return this.indices != null;
    }

    public void setIndicesIsSet(boolean value) {
      if (!value) {
        this.indices = null;
      }
    }

    public int getTypesSize() {
      return (this.types == null) ? 0 : this.types.size();
    }

    public java.util.Iterator<java.lang.String> getTypesIterator() {
      return (this.types == null) ? null : this.types.iterator();
    }

    public void addToTypes(java.lang.String elem) {
      if (this.types == null) {
        this.types = new java.util.ArrayList<java.lang.String>();
      }
      this.types.add(elem);
    }

    public java.util.List<java.lang.String> getTypes() {
      return this.types;
    }

    public exportList_args setTypes(java.util.List<java.lang.String> types) {
      this.types = types;
      return this;
    }

    public void unsetTypes() {
      this.types = null;
    }

    /** Returns true if field types is set (has been assigned a value) and false otherwise */
    public boolean isSetTypes() {
      return this.types != null;
    }

    public void setTypesIsSet(boolean value) {
      if (!value) {
        this.types = null;
      }
    }

    public int getRoutingsSize() {
      return (this.routings == null) ? 0 : this.routings.size();
    }

    public java.util.Iterator<java.lang.String> getRoutingsIterator() {
      return (this.routings == null) ? null : this.routings.iterator();
    }

    public void addToRoutings(java.lang.String elem) {
      if (this.routings == null) {
        this.routings = new java.util.ArrayList<java.lang.String>();
      }
      this.routings.add(elem);
    }

    public java.util.List<java.lang.String> getRoutings() {
      return this.routings;
    }

    public exportList_args setRoutings(java.util.List<java.lang.String> routings) {
      this.routings = routings;
      return this;
    }

    public void unsetRoutings() {
      this.routings = null;
    }

    /** Returns true if field routings is set (has been assigned a value) and false otherwise */
    public boolean isSetRoutings() {
      return this.routings != null;
    }

    public void setRoutingsIsSet(boolean value) {
      if (!value) {
        this.routings = null;
      }
    }

    public int getFieldsSize() {
      return (this.fields == null) ? 0 : this.fields.size();
    }

    public java.util.Iterator<java.lang.String> getFieldsIterator() {
      return (this.fields == null) ? null : this.fields.iterator();
    }

    public void addToFields(java.lang.String elem) {
      if (this.fields == null) {
        this.fields = new java.util.ArrayList<java.lang.String>();
      }
      this.fields.add(elem);
    }

    public java.util.List<java.lang.String> getFields() {
      return this.fields;
    }

    public exportList_args setFields(java.util.List<java.lang.String> fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been assigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public java.lang.String getTimeKey() {
      return this.timeKey;
    }

    public exportList_args setTimeKey(java.lang.String timeKey) {
      this.timeKey = timeKey;
      return this;
    }

    public void unsetTimeKey() {
      this.timeKey = null;
    }

    /** Returns true if field timeKey is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeKey() {
      return this.timeKey != null;
    }

    public void setTimeKeyIsSet(boolean value) {
      if (!value) {
        this.timeKey = null;
      }
    }

    public long getS() {
      return this.s;
    }

    public exportList_args setS(long s) {
      this.s = s;
      setSIsSet(true);
      return this;
    }

    public void unsetS() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
    }

    /** Returns true if field s is set (has been assigned a value) and false otherwise */
    public boolean isSetS() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
    }

    public void setSIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
    }

    public long getE() {
      return this.e;
    }

    public exportList_args setE(long e) {
      this.e = e;
      setEIsSet(true);
      return this;
    }

    public void unsetE() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __E_ISSET_ID);
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __E_ISSET_ID);
    }

    public void setEIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __E_ISSET_ID, value);
    }

    public java.lang.String getRule() {
      return this.rule;
    }

    public exportList_args setRule(java.lang.String rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public java.lang.String getFirstField() {
      return this.firstField;
    }

    public exportList_args setFirstField(java.lang.String firstField) {
      this.firstField = firstField;
      return this;
    }

    public void unsetFirstField() {
      this.firstField = null;
    }

    /** Returns true if field firstField is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstField() {
      return this.firstField != null;
    }

    public void setFirstFieldIsSet(boolean value) {
      if (!value) {
        this.firstField = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INDICES:
        if (value == null) {
          unsetIndices();
        } else {
          setIndices((java.util.List<java.lang.String>)value);
        }
        break;

      case TYPES:
        if (value == null) {
          unsetTypes();
        } else {
          setTypes((java.util.List<java.lang.String>)value);
        }
        break;

      case ROUTINGS:
        if (value == null) {
          unsetRoutings();
        } else {
          setRoutings((java.util.List<java.lang.String>)value);
        }
        break;

      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((java.util.List<java.lang.String>)value);
        }
        break;

      case TIME_KEY:
        if (value == null) {
          unsetTimeKey();
        } else {
          setTimeKey((java.lang.String)value);
        }
        break;

      case S:
        if (value == null) {
          unsetS();
        } else {
          setS((java.lang.Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((java.lang.Long)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((java.lang.String)value);
        }
        break;

      case FIRST_FIELD:
        if (value == null) {
          unsetFirstField();
        } else {
          setFirstField((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INDICES:
        return getIndices();

      case TYPES:
        return getTypes();

      case ROUTINGS:
        return getRoutings();

      case FIELDS:
        return getFields();

      case TIME_KEY:
        return getTimeKey();

      case S:
        return getS();

      case E:
        return getE();

      case RULE:
        return getRule();

      case FIRST_FIELD:
        return getFirstField();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INDICES:
        return isSetIndices();
      case TYPES:
        return isSetTypes();
      case ROUTINGS:
        return isSetRoutings();
      case FIELDS:
        return isSetFields();
      case TIME_KEY:
        return isSetTimeKey();
      case S:
        return isSetS();
      case E:
        return isSetE();
      case RULE:
        return isSetRule();
      case FIRST_FIELD:
        return isSetFirstField();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof exportList_args)
        return this.equals((exportList_args)that);
      return false;
    }

    public boolean equals(exportList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_indices = true && this.isSetIndices();
      boolean that_present_indices = true && that.isSetIndices();
      if (this_present_indices || that_present_indices) {
        if (!(this_present_indices && that_present_indices))
          return false;
        if (!this.indices.equals(that.indices))
          return false;
      }

      boolean this_present_types = true && this.isSetTypes();
      boolean that_present_types = true && that.isSetTypes();
      if (this_present_types || that_present_types) {
        if (!(this_present_types && that_present_types))
          return false;
        if (!this.types.equals(that.types))
          return false;
      }

      boolean this_present_routings = true && this.isSetRoutings();
      boolean that_present_routings = true && that.isSetRoutings();
      if (this_present_routings || that_present_routings) {
        if (!(this_present_routings && that_present_routings))
          return false;
        if (!this.routings.equals(that.routings))
          return false;
      }

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      boolean this_present_timeKey = true && this.isSetTimeKey();
      boolean that_present_timeKey = true && that.isSetTimeKey();
      if (this_present_timeKey || that_present_timeKey) {
        if (!(this_present_timeKey && that_present_timeKey))
          return false;
        if (!this.timeKey.equals(that.timeKey))
          return false;
      }

      boolean this_present_s = true;
      boolean that_present_s = true;
      if (this_present_s || that_present_s) {
        if (!(this_present_s && that_present_s))
          return false;
        if (this.s != that.s)
          return false;
      }

      boolean this_present_e = true;
      boolean that_present_e = true;
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (this.e != that.e)
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      boolean this_present_firstField = true && this.isSetFirstField();
      boolean that_present_firstField = true && that.isSetFirstField();
      if (this_present_firstField || that_present_firstField) {
        if (!(this_present_firstField && that_present_firstField))
          return false;
        if (!this.firstField.equals(that.firstField))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIndices()) ? 131071 : 524287);
      if (isSetIndices())
        hashCode = hashCode * 8191 + indices.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypes()) ? 131071 : 524287);
      if (isSetTypes())
        hashCode = hashCode * 8191 + types.hashCode();

      hashCode = hashCode * 8191 + ((isSetRoutings()) ? 131071 : 524287);
      if (isSetRoutings())
        hashCode = hashCode * 8191 + routings.hashCode();

      hashCode = hashCode * 8191 + ((isSetFields()) ? 131071 : 524287);
      if (isSetFields())
        hashCode = hashCode * 8191 + fields.hashCode();

      hashCode = hashCode * 8191 + ((isSetTimeKey()) ? 131071 : 524287);
      if (isSetTimeKey())
        hashCode = hashCode * 8191 + timeKey.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(s);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(e);

      hashCode = hashCode * 8191 + ((isSetRule()) ? 131071 : 524287);
      if (isSetRule())
        hashCode = hashCode * 8191 + rule.hashCode();

      hashCode = hashCode * 8191 + ((isSetFirstField()) ? 131071 : 524287);
      if (isSetFirstField())
        hashCode = hashCode * 8191 + firstField.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(exportList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIndices()).compareTo(other.isSetIndices());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndices()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indices, other.indices);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoutings()).compareTo(other.isSetRoutings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoutings()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routings, other.routings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeKey()).compareTo(other.isSetTimeKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeKey, other.timeKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFirstField()).compareTo(other.isSetFirstField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstField, other.firstField);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exportList_args(");
      boolean first = true;

      sb.append("indices:");
      if (this.indices == null) {
        sb.append("null");
      } else {
        sb.append(this.indices);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("routings:");
      if (this.routings == null) {
        sb.append("null");
      } else {
        sb.append(this.routings);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeKey:");
      if (this.timeKey == null) {
        sb.append("null");
      } else {
        sb.append(this.timeKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s:");
      sb.append(this.s);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("firstField:");
      if (this.firstField == null) {
        sb.append("null");
      } else {
        sb.append(this.firstField);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportList_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exportList_argsStandardScheme getScheme() {
        return new exportList_argsStandardScheme();
      }
    }

    private static class exportList_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<exportList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDICES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.indices = new java.util.ArrayList<java.lang.String>(_list74.size);
                  java.lang.String _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = iprot.readString();
                    struct.indices.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setIndicesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list77 = iprot.readListBegin();
                  struct.types = new java.util.ArrayList<java.lang.String>(_list77.size);
                  java.lang.String _elem78;
                  for (int _i79 = 0; _i79 < _list77.size; ++_i79)
                  {
                    _elem78 = iprot.readString();
                    struct.types.add(_elem78);
                  }
                  iprot.readListEnd();
                }
                struct.setTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROUTINGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.routings = new java.util.ArrayList<java.lang.String>(_list80.size);
                  java.lang.String _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = iprot.readString();
                    struct.routings.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setRoutingsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                  struct.fields = new java.util.ArrayList<java.lang.String>(_list83.size);
                  java.lang.String _elem84;
                  for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                  {
                    _elem84 = iprot.readString();
                    struct.fields.add(_elem84);
                  }
                  iprot.readListEnd();
                }
                struct.setFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIME_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timeKey = iprot.readString();
                struct.setTimeKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // S
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.s = iprot.readI64();
                struct.setSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.e = iprot.readI64();
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rule = iprot.readString();
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // FIRST_FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstField = iprot.readString();
                struct.setFirstFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.indices != null) {
          oprot.writeFieldBegin(INDICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.indices.size()));
            for (java.lang.String _iter86 : struct.indices)
            {
              oprot.writeString(_iter86);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.types != null) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.types.size()));
            for (java.lang.String _iter87 : struct.types)
            {
              oprot.writeString(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.routings != null) {
          oprot.writeFieldBegin(ROUTINGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.routings.size()));
            for (java.lang.String _iter88 : struct.routings)
            {
              oprot.writeString(_iter88);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.fields != null) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
            for (java.lang.String _iter89 : struct.fields)
            {
              oprot.writeString(_iter89);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.timeKey != null) {
          oprot.writeFieldBegin(TIME_KEY_FIELD_DESC);
          oprot.writeString(struct.timeKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(S_FIELD_DESC);
        oprot.writeI64(struct.s);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(E_FIELD_DESC);
        oprot.writeI64(struct.e);
        oprot.writeFieldEnd();
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          oprot.writeString(struct.rule);
          oprot.writeFieldEnd();
        }
        if (struct.firstField != null) {
          oprot.writeFieldBegin(FIRST_FIELD_FIELD_DESC);
          oprot.writeString(struct.firstField);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportList_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exportList_argsTupleScheme getScheme() {
        return new exportList_argsTupleScheme();
      }
    }

    private static class exportList_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<exportList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndices()) {
          optionals.set(0);
        }
        if (struct.isSetTypes()) {
          optionals.set(1);
        }
        if (struct.isSetRoutings()) {
          optionals.set(2);
        }
        if (struct.isSetFields()) {
          optionals.set(3);
        }
        if (struct.isSetTimeKey()) {
          optionals.set(4);
        }
        if (struct.isSetS()) {
          optionals.set(5);
        }
        if (struct.isSetE()) {
          optionals.set(6);
        }
        if (struct.isSetRule()) {
          optionals.set(7);
        }
        if (struct.isSetFirstField()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetIndices()) {
          {
            oprot.writeI32(struct.indices.size());
            for (java.lang.String _iter90 : struct.indices)
            {
              oprot.writeString(_iter90);
            }
          }
        }
        if (struct.isSetTypes()) {
          {
            oprot.writeI32(struct.types.size());
            for (java.lang.String _iter91 : struct.types)
            {
              oprot.writeString(_iter91);
            }
          }
        }
        if (struct.isSetRoutings()) {
          {
            oprot.writeI32(struct.routings.size());
            for (java.lang.String _iter92 : struct.routings)
            {
              oprot.writeString(_iter92);
            }
          }
        }
        if (struct.isSetFields()) {
          {
            oprot.writeI32(struct.fields.size());
            for (java.lang.String _iter93 : struct.fields)
            {
              oprot.writeString(_iter93);
            }
          }
        }
        if (struct.isSetTimeKey()) {
          oprot.writeString(struct.timeKey);
        }
        if (struct.isSetS()) {
          oprot.writeI64(struct.s);
        }
        if (struct.isSetE()) {
          oprot.writeI64(struct.e);
        }
        if (struct.isSetRule()) {
          oprot.writeString(struct.rule);
        }
        if (struct.isSetFirstField()) {
          oprot.writeString(struct.firstField);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.indices = new java.util.ArrayList<java.lang.String>(_list94.size);
            java.lang.String _elem95;
            for (int _i96 = 0; _i96 < _list94.size; ++_i96)
            {
              _elem95 = iprot.readString();
              struct.indices.add(_elem95);
            }
          }
          struct.setIndicesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.types = new java.util.ArrayList<java.lang.String>(_list97.size);
            java.lang.String _elem98;
            for (int _i99 = 0; _i99 < _list97.size; ++_i99)
            {
              _elem98 = iprot.readString();
              struct.types.add(_elem98);
            }
          }
          struct.setTypesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.routings = new java.util.ArrayList<java.lang.String>(_list100.size);
            java.lang.String _elem101;
            for (int _i102 = 0; _i102 < _list100.size; ++_i102)
            {
              _elem101 = iprot.readString();
              struct.routings.add(_elem101);
            }
          }
          struct.setRoutingsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.fields = new java.util.ArrayList<java.lang.String>(_list103.size);
            java.lang.String _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = iprot.readString();
              struct.fields.add(_elem104);
            }
          }
          struct.setFieldsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.timeKey = iprot.readString();
          struct.setTimeKeyIsSet(true);
        }
        if (incoming.get(5)) {
          struct.s = iprot.readI64();
          struct.setSIsSet(true);
        }
        if (incoming.get(6)) {
          struct.e = iprot.readI64();
          struct.setEIsSet(true);
        }
        if (incoming.get(7)) {
          struct.rule = iprot.readString();
          struct.setRuleIsSet(true);
        }
        if (incoming.get(8)) {
          struct.firstField = iprot.readString();
          struct.setFirstFieldIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exportList_result implements org.apache.thrift.TBase<exportList_result, exportList_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exportList_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exportList_resultTupleSchemeFactory();

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportList_result.class, metaDataMap);
    }

    public exportList_result() {
    }

    public exportList_result(
      java.util.List<java.util.Map<java.lang.String,java.lang.String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportList_result(exportList_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.Map<java.lang.String,java.lang.String>> __this__success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(other.success.size());
        for (java.util.Map<java.lang.String,java.lang.String> other_element : other.success) {
          java.util.Map<java.lang.String,java.lang.String> __this__success_copy = new java.util.HashMap<java.lang.String,java.lang.String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public exportList_result deepCopy() {
      return new exportList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.util.Map<java.lang.String,java.lang.String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.Map<java.lang.String,java.lang.String> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getSuccess() {
      return this.success;
    }

    public exportList_result setSuccess(java.util.List<java.util.Map<java.lang.String,java.lang.String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof exportList_result)
        return this.equals((exportList_result)that);
      return false;
    }

    public boolean equals(exportList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(exportList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exportList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportList_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exportList_resultStandardScheme getScheme() {
        return new exportList_resultStandardScheme();
      }
    }

    private static class exportList_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<exportList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list106.size);
                  java.util.Map<java.lang.String,java.lang.String> _elem107;
                  for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map109 = iprot.readMapBegin();
                      _elem107 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map109.size);
                      java.lang.String _key110;
                      java.lang.String _val111;
                      for (int _i112 = 0; _i112 < _map109.size; ++_i112)
                      {
                        _key110 = iprot.readString();
                        _val111 = iprot.readString();
                        _elem107.put(_key110, _val111);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem107);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (java.util.Map<java.lang.String,java.lang.String> _iter113 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter113.size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter114 : _iter113.entrySet())
                {
                  oprot.writeString(_iter114.getKey());
                  oprot.writeString(_iter114.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportList_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exportList_resultTupleScheme getScheme() {
        return new exportList_resultTupleScheme();
      }
    }

    private static class exportList_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<exportList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map<java.lang.String,java.lang.String> _iter115 : struct.success)
            {
              {
                oprot.writeI32(_iter115.size());
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter116 : _iter115.entrySet())
                {
                  oprot.writeString(_iter116.getKey());
                  oprot.writeString(_iter116.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list117.size);
            java.util.Map<java.lang.String,java.lang.String> _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              {
                org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem118 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map120.size);
                java.lang.String _key121;
                java.lang.String _val122;
                for (int _i123 = 0; _i123 < _map120.size; ++_i123)
                {
                  _key121 = iprot.readString();
                  _val122 = iprot.readString();
                  _elem118.put(_key121, _val122);
                }
              }
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exportListWithBuss_args implements org.apache.thrift.TBase<exportListWithBuss_args, exportListWithBuss_args._Fields>, java.io.Serializable, Cloneable, Comparable<exportListWithBuss_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportListWithBuss_args");

    private static final org.apache.thrift.protocol.TField INDICES_FIELD_DESC = new org.apache.thrift.protocol.TField("indices", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField ROUTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("routings", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField TIME_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("timeKey", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.I64, (short)7);
    private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("rule", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField EXCLUDE_RULE_FIELD_DESC = new org.apache.thrift.protocol.TField("excludeRule", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField FIRST_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("firstField", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField BUSS_FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bussFields", org.apache.thrift.protocol.TType.LIST, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exportListWithBuss_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exportListWithBuss_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> indices; // required
    public java.util.List<java.lang.String> types; // required
    public java.util.List<java.lang.String> routings; // required
    public java.util.List<java.lang.String> fields; // required
    public java.lang.String timeKey; // required
    public long s; // required
    public long e; // required
    public java.lang.String rule; // required
    public java.lang.String excludeRule; // required
    public java.lang.String firstField; // required
    public java.util.List<java.lang.String> bussFields; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INDICES((short)1, "indices"),
      TYPES((short)2, "types"),
      ROUTINGS((short)3, "routings"),
      FIELDS((short)4, "fields"),
      TIME_KEY((short)5, "timeKey"),
      S((short)6, "s"),
      E((short)7, "e"),
      RULE((short)8, "rule"),
      EXCLUDE_RULE((short)9, "excludeRule"),
      FIRST_FIELD((short)10, "firstField"),
      BUSS_FIELDS((short)11, "bussFields");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INDICES
            return INDICES;
          case 2: // TYPES
            return TYPES;
          case 3: // ROUTINGS
            return ROUTINGS;
          case 4: // FIELDS
            return FIELDS;
          case 5: // TIME_KEY
            return TIME_KEY;
          case 6: // S
            return S;
          case 7: // E
            return E;
          case 8: // RULE
            return RULE;
          case 9: // EXCLUDE_RULE
            return EXCLUDE_RULE;
          case 10: // FIRST_FIELD
            return FIRST_FIELD;
          case 11: // BUSS_FIELDS
            return BUSS_FIELDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __S_ISSET_ID = 0;
    private static final int __E_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INDICES, new org.apache.thrift.meta_data.FieldMetaData("indices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.ROUTINGS, new org.apache.thrift.meta_data.FieldMetaData("routings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.TIME_KEY, new org.apache.thrift.meta_data.FieldMetaData("timeKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXCLUDE_RULE, new org.apache.thrift.meta_data.FieldMetaData("excludeRule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIRST_FIELD, new org.apache.thrift.meta_data.FieldMetaData("firstField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BUSS_FIELDS, new org.apache.thrift.meta_data.FieldMetaData("bussFields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportListWithBuss_args.class, metaDataMap);
    }

    public exportListWithBuss_args() {
    }

    public exportListWithBuss_args(
      java.util.List<java.lang.String> indices,
      java.util.List<java.lang.String> types,
      java.util.List<java.lang.String> routings,
      java.util.List<java.lang.String> fields,
      java.lang.String timeKey,
      long s,
      long e,
      java.lang.String rule,
      java.lang.String excludeRule,
      java.lang.String firstField,
      java.util.List<java.lang.String> bussFields)
    {
      this();
      this.indices = indices;
      this.types = types;
      this.routings = routings;
      this.fields = fields;
      this.timeKey = timeKey;
      this.s = s;
      setSIsSet(true);
      this.e = e;
      setEIsSet(true);
      this.rule = rule;
      this.excludeRule = excludeRule;
      this.firstField = firstField;
      this.bussFields = bussFields;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportListWithBuss_args(exportListWithBuss_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetIndices()) {
        java.util.List<java.lang.String> __this__indices = new java.util.ArrayList<java.lang.String>(other.indices);
        this.indices = __this__indices;
      }
      if (other.isSetTypes()) {
        java.util.List<java.lang.String> __this__types = new java.util.ArrayList<java.lang.String>(other.types);
        this.types = __this__types;
      }
      if (other.isSetRoutings()) {
        java.util.List<java.lang.String> __this__routings = new java.util.ArrayList<java.lang.String>(other.routings);
        this.routings = __this__routings;
      }
      if (other.isSetFields()) {
        java.util.List<java.lang.String> __this__fields = new java.util.ArrayList<java.lang.String>(other.fields);
        this.fields = __this__fields;
      }
      if (other.isSetTimeKey()) {
        this.timeKey = other.timeKey;
      }
      this.s = other.s;
      this.e = other.e;
      if (other.isSetRule()) {
        this.rule = other.rule;
      }
      if (other.isSetExcludeRule()) {
        this.excludeRule = other.excludeRule;
      }
      if (other.isSetFirstField()) {
        this.firstField = other.firstField;
      }
      if (other.isSetBussFields()) {
        java.util.List<java.lang.String> __this__bussFields = new java.util.ArrayList<java.lang.String>(other.bussFields);
        this.bussFields = __this__bussFields;
      }
    }

    public exportListWithBuss_args deepCopy() {
      return new exportListWithBuss_args(this);
    }

    @Override
    public void clear() {
      this.indices = null;
      this.types = null;
      this.routings = null;
      this.fields = null;
      this.timeKey = null;
      setSIsSet(false);
      this.s = 0;
      setEIsSet(false);
      this.e = 0;
      this.rule = null;
      this.excludeRule = null;
      this.firstField = null;
      this.bussFields = null;
    }

    public int getIndicesSize() {
      return (this.indices == null) ? 0 : this.indices.size();
    }

    public java.util.Iterator<java.lang.String> getIndicesIterator() {
      return (this.indices == null) ? null : this.indices.iterator();
    }

    public void addToIndices(java.lang.String elem) {
      if (this.indices == null) {
        this.indices = new java.util.ArrayList<java.lang.String>();
      }
      this.indices.add(elem);
    }

    public java.util.List<java.lang.String> getIndices() {
      return this.indices;
    }

    public exportListWithBuss_args setIndices(java.util.List<java.lang.String> indices) {
      this.indices = indices;
      return this;
    }

    public void unsetIndices() {
      this.indices = null;
    }

    /** Returns true if field indices is set (has been assigned a value) and false otherwise */
    public boolean isSetIndices() {
      return this.indices != null;
    }

    public void setIndicesIsSet(boolean value) {
      if (!value) {
        this.indices = null;
      }
    }

    public int getTypesSize() {
      return (this.types == null) ? 0 : this.types.size();
    }

    public java.util.Iterator<java.lang.String> getTypesIterator() {
      return (this.types == null) ? null : this.types.iterator();
    }

    public void addToTypes(java.lang.String elem) {
      if (this.types == null) {
        this.types = new java.util.ArrayList<java.lang.String>();
      }
      this.types.add(elem);
    }

    public java.util.List<java.lang.String> getTypes() {
      return this.types;
    }

    public exportListWithBuss_args setTypes(java.util.List<java.lang.String> types) {
      this.types = types;
      return this;
    }

    public void unsetTypes() {
      this.types = null;
    }

    /** Returns true if field types is set (has been assigned a value) and false otherwise */
    public boolean isSetTypes() {
      return this.types != null;
    }

    public void setTypesIsSet(boolean value) {
      if (!value) {
        this.types = null;
      }
    }

    public int getRoutingsSize() {
      return (this.routings == null) ? 0 : this.routings.size();
    }

    public java.util.Iterator<java.lang.String> getRoutingsIterator() {
      return (this.routings == null) ? null : this.routings.iterator();
    }

    public void addToRoutings(java.lang.String elem) {
      if (this.routings == null) {
        this.routings = new java.util.ArrayList<java.lang.String>();
      }
      this.routings.add(elem);
    }

    public java.util.List<java.lang.String> getRoutings() {
      return this.routings;
    }

    public exportListWithBuss_args setRoutings(java.util.List<java.lang.String> routings) {
      this.routings = routings;
      return this;
    }

    public void unsetRoutings() {
      this.routings = null;
    }

    /** Returns true if field routings is set (has been assigned a value) and false otherwise */
    public boolean isSetRoutings() {
      return this.routings != null;
    }

    public void setRoutingsIsSet(boolean value) {
      if (!value) {
        this.routings = null;
      }
    }

    public int getFieldsSize() {
      return (this.fields == null) ? 0 : this.fields.size();
    }

    public java.util.Iterator<java.lang.String> getFieldsIterator() {
      return (this.fields == null) ? null : this.fields.iterator();
    }

    public void addToFields(java.lang.String elem) {
      if (this.fields == null) {
        this.fields = new java.util.ArrayList<java.lang.String>();
      }
      this.fields.add(elem);
    }

    public java.util.List<java.lang.String> getFields() {
      return this.fields;
    }

    public exportListWithBuss_args setFields(java.util.List<java.lang.String> fields) {
      this.fields = fields;
      return this;
    }

    public void unsetFields() {
      this.fields = null;
    }

    /** Returns true if field fields is set (has been assigned a value) and false otherwise */
    public boolean isSetFields() {
      return this.fields != null;
    }

    public void setFieldsIsSet(boolean value) {
      if (!value) {
        this.fields = null;
      }
    }

    public java.lang.String getTimeKey() {
      return this.timeKey;
    }

    public exportListWithBuss_args setTimeKey(java.lang.String timeKey) {
      this.timeKey = timeKey;
      return this;
    }

    public void unsetTimeKey() {
      this.timeKey = null;
    }

    /** Returns true if field timeKey is set (has been assigned a value) and false otherwise */
    public boolean isSetTimeKey() {
      return this.timeKey != null;
    }

    public void setTimeKeyIsSet(boolean value) {
      if (!value) {
        this.timeKey = null;
      }
    }

    public long getS() {
      return this.s;
    }

    public exportListWithBuss_args setS(long s) {
      this.s = s;
      setSIsSet(true);
      return this;
    }

    public void unsetS() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
    }

    /** Returns true if field s is set (has been assigned a value) and false otherwise */
    public boolean isSetS() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
    }

    public void setSIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
    }

    public long getE() {
      return this.e;
    }

    public exportListWithBuss_args setE(long e) {
      this.e = e;
      setEIsSet(true);
      return this;
    }

    public void unsetE() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __E_ISSET_ID);
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __E_ISSET_ID);
    }

    public void setEIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __E_ISSET_ID, value);
    }

    public java.lang.String getRule() {
      return this.rule;
    }

    public exportListWithBuss_args setRule(java.lang.String rule) {
      this.rule = rule;
      return this;
    }

    public void unsetRule() {
      this.rule = null;
    }

    /** Returns true if field rule is set (has been assigned a value) and false otherwise */
    public boolean isSetRule() {
      return this.rule != null;
    }

    public void setRuleIsSet(boolean value) {
      if (!value) {
        this.rule = null;
      }
    }

    public java.lang.String getExcludeRule() {
      return this.excludeRule;
    }

    public exportListWithBuss_args setExcludeRule(java.lang.String excludeRule) {
      this.excludeRule = excludeRule;
      return this;
    }

    public void unsetExcludeRule() {
      this.excludeRule = null;
    }

    /** Returns true if field excludeRule is set (has been assigned a value) and false otherwise */
    public boolean isSetExcludeRule() {
      return this.excludeRule != null;
    }

    public void setExcludeRuleIsSet(boolean value) {
      if (!value) {
        this.excludeRule = null;
      }
    }

    public java.lang.String getFirstField() {
      return this.firstField;
    }

    public exportListWithBuss_args setFirstField(java.lang.String firstField) {
      this.firstField = firstField;
      return this;
    }

    public void unsetFirstField() {
      this.firstField = null;
    }

    /** Returns true if field firstField is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstField() {
      return this.firstField != null;
    }

    public void setFirstFieldIsSet(boolean value) {
      if (!value) {
        this.firstField = null;
      }
    }

    public int getBussFieldsSize() {
      return (this.bussFields == null) ? 0 : this.bussFields.size();
    }

    public java.util.Iterator<java.lang.String> getBussFieldsIterator() {
      return (this.bussFields == null) ? null : this.bussFields.iterator();
    }

    public void addToBussFields(java.lang.String elem) {
      if (this.bussFields == null) {
        this.bussFields = new java.util.ArrayList<java.lang.String>();
      }
      this.bussFields.add(elem);
    }

    public java.util.List<java.lang.String> getBussFields() {
      return this.bussFields;
    }

    public exportListWithBuss_args setBussFields(java.util.List<java.lang.String> bussFields) {
      this.bussFields = bussFields;
      return this;
    }

    public void unsetBussFields() {
      this.bussFields = null;
    }

    /** Returns true if field bussFields is set (has been assigned a value) and false otherwise */
    public boolean isSetBussFields() {
      return this.bussFields != null;
    }

    public void setBussFieldsIsSet(boolean value) {
      if (!value) {
        this.bussFields = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INDICES:
        if (value == null) {
          unsetIndices();
        } else {
          setIndices((java.util.List<java.lang.String>)value);
        }
        break;

      case TYPES:
        if (value == null) {
          unsetTypes();
        } else {
          setTypes((java.util.List<java.lang.String>)value);
        }
        break;

      case ROUTINGS:
        if (value == null) {
          unsetRoutings();
        } else {
          setRoutings((java.util.List<java.lang.String>)value);
        }
        break;

      case FIELDS:
        if (value == null) {
          unsetFields();
        } else {
          setFields((java.util.List<java.lang.String>)value);
        }
        break;

      case TIME_KEY:
        if (value == null) {
          unsetTimeKey();
        } else {
          setTimeKey((java.lang.String)value);
        }
        break;

      case S:
        if (value == null) {
          unsetS();
        } else {
          setS((java.lang.Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((java.lang.Long)value);
        }
        break;

      case RULE:
        if (value == null) {
          unsetRule();
        } else {
          setRule((java.lang.String)value);
        }
        break;

      case EXCLUDE_RULE:
        if (value == null) {
          unsetExcludeRule();
        } else {
          setExcludeRule((java.lang.String)value);
        }
        break;

      case FIRST_FIELD:
        if (value == null) {
          unsetFirstField();
        } else {
          setFirstField((java.lang.String)value);
        }
        break;

      case BUSS_FIELDS:
        if (value == null) {
          unsetBussFields();
        } else {
          setBussFields((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INDICES:
        return getIndices();

      case TYPES:
        return getTypes();

      case ROUTINGS:
        return getRoutings();

      case FIELDS:
        return getFields();

      case TIME_KEY:
        return getTimeKey();

      case S:
        return getS();

      case E:
        return getE();

      case RULE:
        return getRule();

      case EXCLUDE_RULE:
        return getExcludeRule();

      case FIRST_FIELD:
        return getFirstField();

      case BUSS_FIELDS:
        return getBussFields();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INDICES:
        return isSetIndices();
      case TYPES:
        return isSetTypes();
      case ROUTINGS:
        return isSetRoutings();
      case FIELDS:
        return isSetFields();
      case TIME_KEY:
        return isSetTimeKey();
      case S:
        return isSetS();
      case E:
        return isSetE();
      case RULE:
        return isSetRule();
      case EXCLUDE_RULE:
        return isSetExcludeRule();
      case FIRST_FIELD:
        return isSetFirstField();
      case BUSS_FIELDS:
        return isSetBussFields();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof exportListWithBuss_args)
        return this.equals((exportListWithBuss_args)that);
      return false;
    }

    public boolean equals(exportListWithBuss_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_indices = true && this.isSetIndices();
      boolean that_present_indices = true && that.isSetIndices();
      if (this_present_indices || that_present_indices) {
        if (!(this_present_indices && that_present_indices))
          return false;
        if (!this.indices.equals(that.indices))
          return false;
      }

      boolean this_present_types = true && this.isSetTypes();
      boolean that_present_types = true && that.isSetTypes();
      if (this_present_types || that_present_types) {
        if (!(this_present_types && that_present_types))
          return false;
        if (!this.types.equals(that.types))
          return false;
      }

      boolean this_present_routings = true && this.isSetRoutings();
      boolean that_present_routings = true && that.isSetRoutings();
      if (this_present_routings || that_present_routings) {
        if (!(this_present_routings && that_present_routings))
          return false;
        if (!this.routings.equals(that.routings))
          return false;
      }

      boolean this_present_fields = true && this.isSetFields();
      boolean that_present_fields = true && that.isSetFields();
      if (this_present_fields || that_present_fields) {
        if (!(this_present_fields && that_present_fields))
          return false;
        if (!this.fields.equals(that.fields))
          return false;
      }

      boolean this_present_timeKey = true && this.isSetTimeKey();
      boolean that_present_timeKey = true && that.isSetTimeKey();
      if (this_present_timeKey || that_present_timeKey) {
        if (!(this_present_timeKey && that_present_timeKey))
          return false;
        if (!this.timeKey.equals(that.timeKey))
          return false;
      }

      boolean this_present_s = true;
      boolean that_present_s = true;
      if (this_present_s || that_present_s) {
        if (!(this_present_s && that_present_s))
          return false;
        if (this.s != that.s)
          return false;
      }

      boolean this_present_e = true;
      boolean that_present_e = true;
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (this.e != that.e)
          return false;
      }

      boolean this_present_rule = true && this.isSetRule();
      boolean that_present_rule = true && that.isSetRule();
      if (this_present_rule || that_present_rule) {
        if (!(this_present_rule && that_present_rule))
          return false;
        if (!this.rule.equals(that.rule))
          return false;
      }

      boolean this_present_excludeRule = true && this.isSetExcludeRule();
      boolean that_present_excludeRule = true && that.isSetExcludeRule();
      if (this_present_excludeRule || that_present_excludeRule) {
        if (!(this_present_excludeRule && that_present_excludeRule))
          return false;
        if (!this.excludeRule.equals(that.excludeRule))
          return false;
      }

      boolean this_present_firstField = true && this.isSetFirstField();
      boolean that_present_firstField = true && that.isSetFirstField();
      if (this_present_firstField || that_present_firstField) {
        if (!(this_present_firstField && that_present_firstField))
          return false;
        if (!this.firstField.equals(that.firstField))
          return false;
      }

      boolean this_present_bussFields = true && this.isSetBussFields();
      boolean that_present_bussFields = true && that.isSetBussFields();
      if (this_present_bussFields || that_present_bussFields) {
        if (!(this_present_bussFields && that_present_bussFields))
          return false;
        if (!this.bussFields.equals(that.bussFields))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetIndices()) ? 131071 : 524287);
      if (isSetIndices())
        hashCode = hashCode * 8191 + indices.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypes()) ? 131071 : 524287);
      if (isSetTypes())
        hashCode = hashCode * 8191 + types.hashCode();

      hashCode = hashCode * 8191 + ((isSetRoutings()) ? 131071 : 524287);
      if (isSetRoutings())
        hashCode = hashCode * 8191 + routings.hashCode();

      hashCode = hashCode * 8191 + ((isSetFields()) ? 131071 : 524287);
      if (isSetFields())
        hashCode = hashCode * 8191 + fields.hashCode();

      hashCode = hashCode * 8191 + ((isSetTimeKey()) ? 131071 : 524287);
      if (isSetTimeKey())
        hashCode = hashCode * 8191 + timeKey.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(s);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(e);

      hashCode = hashCode * 8191 + ((isSetRule()) ? 131071 : 524287);
      if (isSetRule())
        hashCode = hashCode * 8191 + rule.hashCode();

      hashCode = hashCode * 8191 + ((isSetExcludeRule()) ? 131071 : 524287);
      if (isSetExcludeRule())
        hashCode = hashCode * 8191 + excludeRule.hashCode();

      hashCode = hashCode * 8191 + ((isSetFirstField()) ? 131071 : 524287);
      if (isSetFirstField())
        hashCode = hashCode * 8191 + firstField.hashCode();

      hashCode = hashCode * 8191 + ((isSetBussFields()) ? 131071 : 524287);
      if (isSetBussFields())
        hashCode = hashCode * 8191 + bussFields.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(exportListWithBuss_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIndices()).compareTo(other.isSetIndices());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndices()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indices, other.indices);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRoutings()).compareTo(other.isSetRoutings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoutings()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routings, other.routings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFields()).compareTo(other.isSetFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, other.fields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTimeKey()).compareTo(other.isSetTimeKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimeKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeKey, other.timeKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetS()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRule()).compareTo(other.isSetRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, other.rule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExcludeRule()).compareTo(other.isSetExcludeRule());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExcludeRule()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.excludeRule, other.excludeRule);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFirstField()).compareTo(other.isSetFirstField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstField, other.firstField);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBussFields()).compareTo(other.isSetBussFields());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussFields()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussFields, other.bussFields);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exportListWithBuss_args(");
      boolean first = true;

      sb.append("indices:");
      if (this.indices == null) {
        sb.append("null");
      } else {
        sb.append(this.indices);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("routings:");
      if (this.routings == null) {
        sb.append("null");
      } else {
        sb.append(this.routings);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fields:");
      if (this.fields == null) {
        sb.append("null");
      } else {
        sb.append(this.fields);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timeKey:");
      if (this.timeKey == null) {
        sb.append("null");
      } else {
        sb.append(this.timeKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("s:");
      sb.append(this.s);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      sb.append(this.e);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rule:");
      if (this.rule == null) {
        sb.append("null");
      } else {
        sb.append(this.rule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("excludeRule:");
      if (this.excludeRule == null) {
        sb.append("null");
      } else {
        sb.append(this.excludeRule);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("firstField:");
      if (this.firstField == null) {
        sb.append("null");
      } else {
        sb.append(this.firstField);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussFields:");
      if (this.bussFields == null) {
        sb.append("null");
      } else {
        sb.append(this.bussFields);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportListWithBuss_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exportListWithBuss_argsStandardScheme getScheme() {
        return new exportListWithBuss_argsStandardScheme();
      }
    }

    private static class exportListWithBuss_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<exportListWithBuss_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportListWithBuss_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INDICES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list124 = iprot.readListBegin();
                  struct.indices = new java.util.ArrayList<java.lang.String>(_list124.size);
                  java.lang.String _elem125;
                  for (int _i126 = 0; _i126 < _list124.size; ++_i126)
                  {
                    _elem125 = iprot.readString();
                    struct.indices.add(_elem125);
                  }
                  iprot.readListEnd();
                }
                struct.setIndicesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list127 = iprot.readListBegin();
                  struct.types = new java.util.ArrayList<java.lang.String>(_list127.size);
                  java.lang.String _elem128;
                  for (int _i129 = 0; _i129 < _list127.size; ++_i129)
                  {
                    _elem128 = iprot.readString();
                    struct.types.add(_elem128);
                  }
                  iprot.readListEnd();
                }
                struct.setTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ROUTINGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.routings = new java.util.ArrayList<java.lang.String>(_list130.size);
                  java.lang.String _elem131;
                  for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                  {
                    _elem131 = iprot.readString();
                    struct.routings.add(_elem131);
                  }
                  iprot.readListEnd();
                }
                struct.setRoutingsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list133 = iprot.readListBegin();
                  struct.fields = new java.util.ArrayList<java.lang.String>(_list133.size);
                  java.lang.String _elem134;
                  for (int _i135 = 0; _i135 < _list133.size; ++_i135)
                  {
                    _elem134 = iprot.readString();
                    struct.fields.add(_elem134);
                  }
                  iprot.readListEnd();
                }
                struct.setFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TIME_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.timeKey = iprot.readString();
                struct.setTimeKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // S
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.s = iprot.readI64();
                struct.setSIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.e = iprot.readI64();
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rule = iprot.readString();
                struct.setRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // EXCLUDE_RULE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.excludeRule = iprot.readString();
                struct.setExcludeRuleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // FIRST_FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.firstField = iprot.readString();
                struct.setFirstFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // BUSS_FIELDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.bussFields = new java.util.ArrayList<java.lang.String>(_list136.size);
                  java.lang.String _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = iprot.readString();
                    struct.bussFields.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setBussFieldsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportListWithBuss_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.indices != null) {
          oprot.writeFieldBegin(INDICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.indices.size()));
            for (java.lang.String _iter139 : struct.indices)
            {
              oprot.writeString(_iter139);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.types != null) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.types.size()));
            for (java.lang.String _iter140 : struct.types)
            {
              oprot.writeString(_iter140);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.routings != null) {
          oprot.writeFieldBegin(ROUTINGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.routings.size()));
            for (java.lang.String _iter141 : struct.routings)
            {
              oprot.writeString(_iter141);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.fields != null) {
          oprot.writeFieldBegin(FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
            for (java.lang.String _iter142 : struct.fields)
            {
              oprot.writeString(_iter142);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.timeKey != null) {
          oprot.writeFieldBegin(TIME_KEY_FIELD_DESC);
          oprot.writeString(struct.timeKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(S_FIELD_DESC);
        oprot.writeI64(struct.s);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(E_FIELD_DESC);
        oprot.writeI64(struct.e);
        oprot.writeFieldEnd();
        if (struct.rule != null) {
          oprot.writeFieldBegin(RULE_FIELD_DESC);
          oprot.writeString(struct.rule);
          oprot.writeFieldEnd();
        }
        if (struct.excludeRule != null) {
          oprot.writeFieldBegin(EXCLUDE_RULE_FIELD_DESC);
          oprot.writeString(struct.excludeRule);
          oprot.writeFieldEnd();
        }
        if (struct.firstField != null) {
          oprot.writeFieldBegin(FIRST_FIELD_FIELD_DESC);
          oprot.writeString(struct.firstField);
          oprot.writeFieldEnd();
        }
        if (struct.bussFields != null) {
          oprot.writeFieldBegin(BUSS_FIELDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.bussFields.size()));
            for (java.lang.String _iter143 : struct.bussFields)
            {
              oprot.writeString(_iter143);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportListWithBuss_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exportListWithBuss_argsTupleScheme getScheme() {
        return new exportListWithBuss_argsTupleScheme();
      }
    }

    private static class exportListWithBuss_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<exportListWithBuss_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportListWithBuss_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIndices()) {
          optionals.set(0);
        }
        if (struct.isSetTypes()) {
          optionals.set(1);
        }
        if (struct.isSetRoutings()) {
          optionals.set(2);
        }
        if (struct.isSetFields()) {
          optionals.set(3);
        }
        if (struct.isSetTimeKey()) {
          optionals.set(4);
        }
        if (struct.isSetS()) {
          optionals.set(5);
        }
        if (struct.isSetE()) {
          optionals.set(6);
        }
        if (struct.isSetRule()) {
          optionals.set(7);
        }
        if (struct.isSetExcludeRule()) {
          optionals.set(8);
        }
        if (struct.isSetFirstField()) {
          optionals.set(9);
        }
        if (struct.isSetBussFields()) {
          optionals.set(10);
        }
        oprot.writeBitSet(optionals, 11);
        if (struct.isSetIndices()) {
          {
            oprot.writeI32(struct.indices.size());
            for (java.lang.String _iter144 : struct.indices)
            {
              oprot.writeString(_iter144);
            }
          }
        }
        if (struct.isSetTypes()) {
          {
            oprot.writeI32(struct.types.size());
            for (java.lang.String _iter145 : struct.types)
            {
              oprot.writeString(_iter145);
            }
          }
        }
        if (struct.isSetRoutings()) {
          {
            oprot.writeI32(struct.routings.size());
            for (java.lang.String _iter146 : struct.routings)
            {
              oprot.writeString(_iter146);
            }
          }
        }
        if (struct.isSetFields()) {
          {
            oprot.writeI32(struct.fields.size());
            for (java.lang.String _iter147 : struct.fields)
            {
              oprot.writeString(_iter147);
            }
          }
        }
        if (struct.isSetTimeKey()) {
          oprot.writeString(struct.timeKey);
        }
        if (struct.isSetS()) {
          oprot.writeI64(struct.s);
        }
        if (struct.isSetE()) {
          oprot.writeI64(struct.e);
        }
        if (struct.isSetRule()) {
          oprot.writeString(struct.rule);
        }
        if (struct.isSetExcludeRule()) {
          oprot.writeString(struct.excludeRule);
        }
        if (struct.isSetFirstField()) {
          oprot.writeString(struct.firstField);
        }
        if (struct.isSetBussFields()) {
          {
            oprot.writeI32(struct.bussFields.size());
            for (java.lang.String _iter148 : struct.bussFields)
            {
              oprot.writeString(_iter148);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportListWithBuss_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(11);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.indices = new java.util.ArrayList<java.lang.String>(_list149.size);
            java.lang.String _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = iprot.readString();
              struct.indices.add(_elem150);
            }
          }
          struct.setIndicesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list152 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.types = new java.util.ArrayList<java.lang.String>(_list152.size);
            java.lang.String _elem153;
            for (int _i154 = 0; _i154 < _list152.size; ++_i154)
            {
              _elem153 = iprot.readString();
              struct.types.add(_elem153);
            }
          }
          struct.setTypesIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.routings = new java.util.ArrayList<java.lang.String>(_list155.size);
            java.lang.String _elem156;
            for (int _i157 = 0; _i157 < _list155.size; ++_i157)
            {
              _elem156 = iprot.readString();
              struct.routings.add(_elem156);
            }
          }
          struct.setRoutingsIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list158 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.fields = new java.util.ArrayList<java.lang.String>(_list158.size);
            java.lang.String _elem159;
            for (int _i160 = 0; _i160 < _list158.size; ++_i160)
            {
              _elem159 = iprot.readString();
              struct.fields.add(_elem159);
            }
          }
          struct.setFieldsIsSet(true);
        }
        if (incoming.get(4)) {
          struct.timeKey = iprot.readString();
          struct.setTimeKeyIsSet(true);
        }
        if (incoming.get(5)) {
          struct.s = iprot.readI64();
          struct.setSIsSet(true);
        }
        if (incoming.get(6)) {
          struct.e = iprot.readI64();
          struct.setEIsSet(true);
        }
        if (incoming.get(7)) {
          struct.rule = iprot.readString();
          struct.setRuleIsSet(true);
        }
        if (incoming.get(8)) {
          struct.excludeRule = iprot.readString();
          struct.setExcludeRuleIsSet(true);
        }
        if (incoming.get(9)) {
          struct.firstField = iprot.readString();
          struct.setFirstFieldIsSet(true);
        }
        if (incoming.get(10)) {
          {
            org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.bussFields = new java.util.ArrayList<java.lang.String>(_list161.size);
            java.lang.String _elem162;
            for (int _i163 = 0; _i163 < _list161.size; ++_i163)
            {
              _elem162 = iprot.readString();
              struct.bussFields.add(_elem162);
            }
          }
          struct.setBussFieldsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exportListWithBuss_result implements org.apache.thrift.TBase<exportListWithBuss_result, exportListWithBuss_result._Fields>, java.io.Serializable, Cloneable, Comparable<exportListWithBuss_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportListWithBuss_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exportListWithBuss_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exportListWithBuss_resultTupleSchemeFactory();

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportListWithBuss_result.class, metaDataMap);
    }

    public exportListWithBuss_result() {
    }

    public exportListWithBuss_result(
      java.util.List<java.util.Map<java.lang.String,java.lang.String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportListWithBuss_result(exportListWithBuss_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.Map<java.lang.String,java.lang.String>> __this__success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(other.success.size());
        for (java.util.Map<java.lang.String,java.lang.String> other_element : other.success) {
          java.util.Map<java.lang.String,java.lang.String> __this__success_copy = new java.util.HashMap<java.lang.String,java.lang.String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public exportListWithBuss_result deepCopy() {
      return new exportListWithBuss_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.util.Map<java.lang.String,java.lang.String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.Map<java.lang.String,java.lang.String> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getSuccess() {
      return this.success;
    }

    public exportListWithBuss_result setSuccess(java.util.List<java.util.Map<java.lang.String,java.lang.String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof exportListWithBuss_result)
        return this.equals((exportListWithBuss_result)that);
      return false;
    }

    public boolean equals(exportListWithBuss_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(exportListWithBuss_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exportListWithBuss_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportListWithBuss_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exportListWithBuss_resultStandardScheme getScheme() {
        return new exportListWithBuss_resultStandardScheme();
      }
    }

    private static class exportListWithBuss_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<exportListWithBuss_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportListWithBuss_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list164.size);
                  java.util.Map<java.lang.String,java.lang.String> _elem165;
                  for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map167 = iprot.readMapBegin();
                      _elem165 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map167.size);
                      java.lang.String _key168;
                      java.lang.String _val169;
                      for (int _i170 = 0; _i170 < _map167.size; ++_i170)
                      {
                        _key168 = iprot.readString();
                        _val169 = iprot.readString();
                        _elem165.put(_key168, _val169);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem165);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportListWithBuss_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (java.util.Map<java.lang.String,java.lang.String> _iter171 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter171.size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter172 : _iter171.entrySet())
                {
                  oprot.writeString(_iter172.getKey());
                  oprot.writeString(_iter172.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportListWithBuss_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exportListWithBuss_resultTupleScheme getScheme() {
        return new exportListWithBuss_resultTupleScheme();
      }
    }

    private static class exportListWithBuss_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<exportListWithBuss_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportListWithBuss_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map<java.lang.String,java.lang.String> _iter173 : struct.success)
            {
              {
                oprot.writeI32(_iter173.size());
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter174 : _iter173.entrySet())
                {
                  oprot.writeString(_iter174.getKey());
                  oprot.writeString(_iter174.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportListWithBuss_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list175.size);
            java.util.Map<java.lang.String,java.lang.String> _elem176;
            for (int _i177 = 0; _i177 < _list175.size; ++_i177)
            {
              {
                org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem176 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map178.size);
                java.lang.String _key179;
                java.lang.String _val180;
                for (int _i181 = 0; _i181 < _map178.size; ++_i181)
                {
                  _key179 = iprot.readString();
                  _val180 = iprot.readString();
                  _elem176.put(_key179, _val180);
                }
              }
              struct.success.add(_elem176);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
